import { useEffect } from "react";
import { useOutlet, useNavigate, useLocation } from "react-router-dom";
import { useSelector } from "react-redux";
import { RootState } from "../stores";
import { Col, Row } from "antd";
import { encryptStorage } from "../utils/encryptStorage";

// style
import "./styles/unAuthorizedLayout.css";

const UnauthorizedLayout = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { isAuth } = useSelector((state: RootState) => state.userAuth);
  const outlet = useOutlet();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ auth ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isAuthPage = location.pathname === "/auth";

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const access_token = await encryptStorage.getItem("access_token");
        const projectId = await encryptStorage.getItem("projectId");

        console.log("üîç UnauthorizedLayout checking auth:", {
          isAuth,
          hasToken: !!access_token,
          hasProjectId: !!projectId,
          currentPath: location.pathname,
        });

        // ‡∏ñ‡πâ‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏°‡∏µ token ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ dashboard
        if (isAuth && access_token && access_token !== "undefined") {
          console.log("‚úÖ User is authenticated, redirecting to dashboard");
          navigate("/dashboard/profile", { replace: true });
          return;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ auth ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
        if (!isAuth && !isAuthPage) {
          console.log("‚ùå User not authenticated, redirecting to login");
          navigate("/auth", { replace: true });
          return;
        }
      } catch (error) {
        console.error("Auth check error:", error);
        if (!isAuthPage) {
          navigate("/auth", { replace: true });
        }
      }
    };

    checkAuth();
  }, [isAuth, location.pathname, navigate, isAuthPage]);

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ login ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ layout ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  if (isAuthPage) {
    return <>{outlet}</>;
  }

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ layout ‡πÄ‡∏î‡∏¥‡∏°
  return (
    <Row className="container">
      <Col className="contentContainer">{outlet}</Col>
    </Row>
  );
};

export default UnauthorizedLayout;
