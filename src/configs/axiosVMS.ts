// ‡πÑ‡∏ü‡∏•‡πå: src/configs/axiosVMS.ts

import axios, { AxiosInstance } from "axios";
import { encryptStorage } from "../utils/encryptStorage";
import { store } from "../stores";

// ‡∏™‡∏£‡πâ‡∏≤‡∏á axios instance ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VMS APIs
const axiosVMS: AxiosInstance = axios.create({
    timeout: 30000,
    headers: {
        'Content-Type': 'application/json',
    }
});

// Request interceptor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VMS axios instance
axiosVMS.interceptors.request.use(
    async (request) => {
        const vmsUrl = await encryptStorage.getItem("vmsUrl");
        const vmsToken = await encryptStorage.getItem("vmsToken");

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ baseURL ‡πÅ‡∏ö‡∏ö dynamic ‡∏à‡∏≤‡∏Å vmsUrl
        if (vmsUrl) {
            request.baseURL = vmsUrl;
        } else {
            console.warn('‚ö†Ô∏è No VMS URL found in storage');
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Authorization header ‡∏à‡∏≤‡∏Å vmsToken
        if (vmsToken && vmsToken !== "undefined") {
            request.headers.Authorization = `Bearer ${vmsToken}`;
        } else {
            console.warn('‚ö†Ô∏è No VMS Token found in storage');
        }

        console.log('üîÑ VMS Request:', {
            url: request.url,
            baseURL: request.baseURL,
            method: request.method,
            hasAuth: !!request.headers.Authorization
        });

        return request;
    },
    (error) => {
        console.log('‚ùå VMS API request error:', error);
        return Promise.reject(error);
    }
);

// Response interceptor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VMS axios instance
axiosVMS.interceptors.response.use(
    (response) => {
        console.log('‚úÖ VMS Response:', {
            status: response.status,
            url: response.config.url,
            dataLength: JSON.stringify(response.data).length
        });
        return response;
    },
    async (error) => {
        console.error('‚ùå VMS API Error:', {
            status: error.response?.status,
            url: error.config?.url,
            message: error.response?.data?.message || error.message
        });

        const originalRequest = error.config;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error 401 (Unauthorized)
        if (error.response && error.response.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true;

            console.log("‚ùå [VMS] 401 Unauthorized detected");

            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VMS ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ refresh token logic ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô main API
            // ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
            if (!window.location.pathname.includes('/auth')) {
                console.log("‚ùå [VMS] VMS Token expired, redirecting to login");

                // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå storage ‡πÅ‡∏•‡∏∞ redirect
                await store.dispatch.userAuth.onLogout();
                window.location.href = '/auth';

                return Promise.reject(error);
            }
        }

        return Promise.reject(error);
    }
);

export default axiosVMS;