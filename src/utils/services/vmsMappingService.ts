// ‡πÑ‡∏ü‡∏•‡πå: src/utils/services/vmsMappingService.ts

import { houseMappingService } from "./houseMappingService";
import { areaMappingService } from "./areaMappingService";

class VMSMappingService {

    async initializeAllMappings(): Promise<void> {
        console.log('üöÄ Initializing all VMS mappings...');

        try {
            // ‡πÇ‡∏´‡∏•‡∏î mappings ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            await Promise.all([
                houseMappingService.refreshHouseCache(),
                areaMappingService.refreshAreaCache()
            ]);

            console.log('‚úÖ All VMS mappings initialized successfully');
            console.log(`üìä Mapping summary:`, {
                houses: houseMappingService.getCacheSize(),
                areas: areaMappingService.getCacheSize()
            });

        } catch (error) {
            console.error('‚ùå Failed to initialize VMS mappings:', error);
            throw error;
        }
    }

    async refreshAllMappings(): Promise<void> {
        console.log('üîÑ Refreshing all VMS mappings...');

        try {
            await Promise.all([
                houseMappingService.refreshHouseCache(),
                areaMappingService.refreshAreaCache()
            ]);

            console.log('‚úÖ All VMS mappings refreshed successfully');
        } catch (error) {
            console.error('‚ùå Failed to refresh VMS mappings:', error);
            throw error;
        }
    }

    clearAllCaches(): void {
        houseMappingService.clearCache();
        areaMappingService.clearCache();
        console.log('üßπ All VMS mapping caches cleared');
    }

    getMappingStatus(): {
        houses: { size: number; isValid: boolean };
        areas: { size: number; isValid: boolean };
    } {
        return {
            houses: {
                size: houseMappingService.getCacheSize(),
                isValid: houseMappingService.isCacheValid()
            },
            areas: {
                size: areaMappingService.getCacheSize(),
                isValid: areaMappingService.isCacheValid()
            }
        };
    }

    // Utility methods for quick access
    async getHouseAddress(houseId: string): Promise<string> {
        return houseMappingService.getHouseAddress(houseId);
    }

    async getAreaName(areaId: string): Promise<string> {
        return areaMappingService.getAreaName(areaId);
    }

    async getMultipleHouseAddresses(houseIds: string[]): Promise<Map<string, string>> {
        return houseMappingService.getMultipleHouseAddresses(houseIds);
    }

    async getMultipleAreaNames(areaIds: string[]): Promise<Map<string, string>> {
        return areaMappingService.getMultipleAreaNames(areaIds);
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö map array ‡∏Ç‡∏≠‡∏á area IDs ‡πÄ‡∏õ‡πá‡∏ô names
    async mapAreaNamesFromArray(areaIds: string[]): Promise<string[]> {
        return areaMappingService.mapAreaNamesFromArray(areaIds);
    }
}

// Export singleton instance
export const vmsMappingService = new VMSMappingService();