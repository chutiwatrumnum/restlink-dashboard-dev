// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô axios instances ‡∏ï‡πà‡∏≤‡∏á‡πÜ
import axios from 'axios';

// Utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retry logic
export const apiWithRetry = async (
  apiCall: () => Promise<any>, 
  maxRetries: number = 3, 
  delay: number = 1000
): Promise<any> => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const result = await apiCall();
      return result;
    } catch (error: any) {
      console.warn(`üîÑ API attempt ${attempt}/${maxRetries} failed:`, error.message);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô timeout ‡∏´‡∏£‡∏∑‡∏≠ network error ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏°‡∏µ retry ‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      if (
        (error.code === 'ECONNABORTED' || error.message.includes('timeout') || error.message.includes('Network Error')) 
        && attempt < maxRetries
      ) {
        console.log(`‚è≥ Retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        delay *= 2; // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÅ‡∏ö‡∏ö exponential backoff
        continue;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà error ‡∏ó‡∏µ‡πà retry ‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠ retry ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
      throw error;
    }
  }
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ axios ‡∏´‡∏•‡∏±‡∏Å (main) ‡∏û‡∏£‡πâ‡∏≠‡∏° retry
export const useMainApi = async () => {
  try {
    const result = await apiWithRetry(async () => {
      const response = await axios.get('/users');
    console.log('üì° Main API response:', response.data);
    return response.data;
    });
    return result;
  } catch (error) {
    console.error('‚ùå Main API error after retries:', error);
    throw error;
  }
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ axios secondary (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô base URL ‡∏ï‡∏≤‡∏° path)
export const useSecondaryApi = async () => {
  try {
    // ‡πÉ‡∏ä‡πâ axios secondary ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô base URL ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const response = await axios.get('/projects');
    console.log('üì° Secondary API response:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Secondary API error:', error);
    throw error;
  }
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ location services
export const useLocationApi = async () => {
  try {
    // ‡πÉ‡∏ä‡πâ location services ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const response = await axios.get('/locations');
    console.log('üìç Location API response:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Location API error:', error);
    throw error;
  }
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4: ‡πÉ‡∏ä‡πâ axios instance ‡πÅ‡∏ö‡∏ö dynamic ‡∏û‡∏£‡πâ‡∏≠‡∏° retry
export const useDynamicApi = async (endpoint: string) => {
  try {
    const result = await apiWithRetry(async () => {
      const response = await axios.get(endpoint);
      console.log(`üì° API response:`, response.data);
    return response.data;
    });
    return result;
  } catch (error) {
    console.error(`‚ùå API error after retries:`, error);
    throw error;
  }
};

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timeout ‡πÅ‡∏ö‡∏ö manual
export const withTimeout = <T>(
  promise: Promise<T>, 
  timeoutMs: number = 30000,
  timeoutMessage: string = 'Request timeout'
): Promise<T> => {
  return Promise.race([
    promise,
    new Promise<never>((_, reject) => {
      setTimeout(() => {
        reject(new Error(timeoutMessage));
      }, timeoutMs);
    })
  ]);
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ manual timeout
export const useApiWithManualTimeout = async () => {
  try {
    const result = await withTimeout(
      axios.get('/slow-endpoint'),
      15000, // 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      'API call took too long'
    );
    return result.data;
  } catch (error) {
    console.error('‚ùå API timeout or error:', error);
    throw error;
  }
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 5: ‡∏Å‡∏≤‡∏£ POST ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location
export const postLocationData = async (locationData: any) => {
  try {
    // ‡πÉ‡∏ä‡πâ location services helper
    const result = await axios.post('/locations', locationData);
    console.log('‚úÖ Location posted successfully:', result.data);
    return result.data;
  } catch (error) {
    console.error('‚ùå Error posting location:', error);
    throw error;
  }
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 6: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô React Component
export const useAxiosInComponent = () => {
  const fetchData = async () => {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      const mainData = await useMainApi();
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô base URL ‡∏ï‡∏≤‡∏° path
      const secondaryData = await useSecondaryApi();
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      if (window.location.pathname.includes('add-location')) {
        const locationData = await useLocationApi();
        console.log('üìç Location data fetched:', locationData);
      }
      
      return { mainData, secondaryData };
    } catch (error) {
      console.error('‚ùå Error fetching data:', error);
    }
  };

  return { fetchData };
}; 