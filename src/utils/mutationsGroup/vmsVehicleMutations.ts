import { useMutation, useQueryClient } from "@tanstack/react-query";
import { message } from "antd";
import axiosVMS from "../../configs/axiosVMS";

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Interface ‡∏ï‡∏≤‡∏° API spec
export interface VMSVehiclePayload {
    license_plate: string;
    area_code: string;
    vehicle_color?: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ
    vehicle_type?: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    vehicle_brand?: string;
    tier: string;
    start_time: string;
    expire_time: string;
    authorized_area: string[];
    house_id: string;
    note?: string;
}

export interface VMSVehicleEditPayload extends VMSVehiclePayload {
    id: string;
}

// === CREATE VMS VEHICLE ===
export const useCreateVMSVehicleMutation = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationKey: ['createVMSVehicle'],
        retry: false,
        mutationFn: async (payload: VMSVehiclePayload) => {
            console.log('üöó Creating VMS Vehicle');
            console.log('üì• Payload received:', payload);

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏≤‡∏° API spec
            const apiPayload: any = {
                license_plate: payload.license_plate,
                area_code: payload.area_code,
                tier: payload.tier,
                start_time: payload.start_time,
                expire_time: payload.expire_time,
                authorized_area: payload.authorized_area || [],
                house_id: payload.house_id
            };

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° vehicle_color ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (payload.vehicle_color && payload.vehicle_color.trim()) {
                apiPayload.vehicle_color = payload.vehicle_color.trim();
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° vehicle_brand ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (payload.vehicle_brand && payload.vehicle_brand.trim()) {
                apiPayload.vehicle_brand = payload.vehicle_brand.trim();
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° vehicle_type ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (payload.vehicle_type) {
                apiPayload.vehicle_type = payload.vehicle_type;
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° note ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (payload.note && payload.note.trim()) {
                apiPayload.note = payload.note.trim();
            }

            console.log('üì§ Final API payload:', JSON.stringify(apiPayload, null, 2));

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
            const response = await axiosVMS.post(
                '/api/collections/vehicle/records',
                apiPayload
            );

            console.log('‚úÖ API Response:', response.data);
            return response.data;
        },
        onSuccess: (data) => {
            console.log('‚úÖ Create vehicle success');
            message.success("create vehicle success!");

            // Refresh data
            queryClient.invalidateQueries({
                queryKey: ["vmsVehicles"]
            });
        },
        onError: (error: any) => {
            console.error('‚ùå Create vehicle error:', error);

            let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ";

            if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            message.error(errorMessage);
        }
    });
};

// === UPDATE VMS VEHICLE ===
export const useUpdateVMSVehicleMutation = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationKey: ['updateVMSVehicle'],
        retry: false,
        mutationFn: async (payload: VMSVehicleEditPayload) => {
            console.log('üîÑ Updating VMS Vehicle');

            const { id, ...updateData } = payload;

            const apiPayload: any = {
                license_plate: updateData.license_plate,
                area_code: updateData.area_code,
                tier: updateData.tier,
                start_time: updateData.start_time,
                expire_time: updateData.expire_time,
                authorized_area: updateData.authorized_area || [],
                house_id: updateData.house_id
            };

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° vehicle_color ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (updateData.vehicle_color && updateData.vehicle_color.trim()) {
                apiPayload.vehicle_color = updateData.vehicle_color.trim();
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° vehicle_brand ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (updateData.vehicle_brand && updateData.vehicle_brand.trim()) {
                apiPayload.vehicle_brand = updateData.vehicle_brand.trim();
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° vehicle_type ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (updateData.vehicle_type) {
                apiPayload.vehicle_type = updateData.vehicle_type;
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° note ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (updateData.note && updateData.note.trim()) {
                apiPayload.note = updateData.note.trim();
            }

            console.log('üì§ Update API payload:', JSON.stringify(apiPayload, null, 2));

            const response = await axiosVMS.patch(
                `/api/collections/vehicle/records/${id}`,
                apiPayload
            );

            console.log('‚úÖ Update API Response:', response.data);
            return response.data;
        },
        onSuccess: (data, variables) => {
            console.log('‚úÖ Update vehicle success');
            message.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

            queryClient.invalidateQueries({
                queryKey: ["vmsVehicles"]
            });
            queryClient.invalidateQueries({
                queryKey: ["vmsVehicle", variables.id],
            });
        },
        onError: (error: any) => {
            console.error('‚ùå Update vehicle error:', error);

            let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ";

            if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            message.error(errorMessage);
        }
    });
};

// === DELETE VMS VEHICLE ===
export const useDeleteVMSVehicleMutation = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationKey: ['deleteVMSVehicle'],
        retry: false,
        mutationFn: async (vehicleId: string) => {
            console.log('üóëÔ∏è Deleting VMS Vehicle:', vehicleId);

            const response = await axiosVMS.delete(
                `/api/collections/vehicle/records/${vehicleId}`
            );

            console.log('‚úÖ Delete API Response:', response.data);
            return response.data;
        },
        onSuccess: () => {
            console.log('‚úÖ Delete vehicle success');
            message.success("delete vehicle success!");

            queryClient.invalidateQueries({
                queryKey: ["vmsVehicles"]
            });
        },
        onError: (error: any) => {
            console.error('‚ùå Delete vehicle error:', error);

            let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ";

            if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            message.error(errorMessage);
        }
    });
};