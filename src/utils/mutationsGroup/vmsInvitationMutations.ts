// ‡πÑ‡∏ü‡∏•‡πå: src/utils/mutationsGroup/vmsInvitationMutations.ts - Working Implementation

import { useMutation, useQueryClient } from "@tanstack/react-query";
import { message } from "antd";
import axiosVMS from "../../configs/axiosVMS";

// Interface ‡∏ï‡∏≤‡∏° API spec ‡∏à‡∏£‡∏¥‡∏á
export interface VMSInvitationPayload {
    guest_name: string;
    start_time: string;
    expire_time: string;
    authorized_area: string[];
    house_id: string;
    type?: string;
    note?: string;
    vehicles?: Array<{
        license_plate: string;
        area_code: string;
    }>;
}

export interface VMSInvitationEditPayload extends VMSInvitationPayload {
    id: string;
}

// === CREATE VMS INVITATION ===
export const useCreateVMSInvitationMutation = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationKey: ['createVMSInvitation'],
        retry: false,
        mutationFn: async (payload: VMSInvitationPayload) => {
            console.log('üöÄ Creating VMS Invitation');
            console.log('üì• Payload received:', payload);

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏≤‡∏° API spec ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û
            const apiPayload: any = {
                guest_name: payload.guest_name,
                start_time: payload.start_time,
                expire_time: payload.expire_time,
                authorized_area: payload.authorized_area || [],
                house_id: payload.house_id,
                type: payload.type || "invitation"
            };

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° note ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (payload.note && payload.note.trim()) {
                apiPayload.note = payload.note.trim();
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° vehicles ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ô‡∏†‡∏≤‡∏û)
            if (payload.vehicles && payload.vehicles.length > 0) {
                apiPayload.vehicles = payload.vehicles;
            }

            console.log('üì§ Final API payload:', JSON.stringify(apiPayload, null, 2));

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
            const response = await axiosVMS.post(
                '/api/collections/invitation/records',
                apiPayload
            );

            console.log('‚úÖ API Response:', response.data);
            return response.data;
        },
        onSuccess: (data) => {
            console.log('‚úÖ Create invitation success');
            message.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

            // Refresh data
            queryClient.invalidateQueries({
                queryKey: ["vmsInvitations"]
            });
        },
        onError: (error: any) => {
            console.error('‚ùå Create invitation error:', error);

            let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ";

            if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            message.error(errorMessage);
        }
    });
};

// === UPDATE VMS INVITATION ===
export const useUpdateVMSInvitationMutation = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationKey: ['updateVMSInvitation'],
        retry: false,
        mutationFn: async (payload: VMSInvitationEditPayload) => {
            console.log('üîÑ Updating VMS Invitation');

            const { id, ...updateData } = payload;

            const apiPayload: any = {
                guest_name: updateData.guest_name,
                start_time: updateData.start_time,
                expire_time: updateData.expire_time,
                authorized_area: updateData.authorized_area || [],
                house_id: updateData.house_id,
                type: updateData.type || "invitation"
            };

            if (updateData.note && updateData.note.trim()) {
                apiPayload.note = updateData.note.trim();
            }

            if (updateData.vehicles && updateData.vehicles.length > 0) {
                apiPayload.vehicles = updateData.vehicles;
            }

            console.log('üì§ Update API payload:', JSON.stringify(apiPayload, null, 2));

            const response = await axiosVMS.patch(
                `/api/collections/invitation/records/${id}`,
                apiPayload
            );

            console.log('‚úÖ Update API Response:', response.data);
            return response.data;
        },
        onSuccess: (data, variables) => {
            console.log('‚úÖ Update invitation success');
            message.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

            queryClient.invalidateQueries({
                queryKey: ["vmsInvitations"]
            });
            queryClient.invalidateQueries({
                queryKey: ["vmsInvitation", variables.id],
            });
        },
        onError: (error: any) => {
            console.error('‚ùå Update invitation error:', error);

            let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ";

            if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            message.error(errorMessage);
        }
    });
};

// === DELETE VMS INVITATION ===
export const useDeleteVMSInvitationMutation = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationKey: ['deleteVMSInvitation'],
        retry: false,
        mutationFn: async (invitationId: string) => {
            console.log('üóëÔ∏è Deleting VMS Invitation:', invitationId);

            const response = await axiosVMS.delete(
                `/api/collections/invitation/records/${invitationId}`
            );

            console.log('‚úÖ Delete API Response:', response.data);
            return response.data;
        },
        onSuccess: () => {
            console.log('‚úÖ Delete invitation success');
            message.success("‡∏•‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

            queryClient.invalidateQueries({
                queryKey: ["vmsInvitations"]
            });
        },
        onError: (error: any) => {
            console.error('‚ùå Delete invitation error:', error);

            let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ";

            if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            message.error(errorMessage);
        }
    });
};