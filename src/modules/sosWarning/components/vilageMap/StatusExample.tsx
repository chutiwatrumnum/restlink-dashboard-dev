import React, { useState, useEffect } from 'react';
import StatusManager, { MarkerSeverity, StatusConfig } from './StatusManager';

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô StatusManager
const StatusExample: React.FC = () => {
  const [currentStatus, setCurrentStatus] = useState<MarkerSeverity>('normal');
  const [statusConfig, setStatusConfig] = useState<StatusConfig[]>(StatusManager.getAllStatuses());

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status
  const changeStatus = (newStatus: MarkerSeverity) => {
    console.log(`üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status ‡∏à‡∏≤‡∏Å ${currentStatus} ‡πÄ‡∏õ‡πá‡∏ô ${newStatus}`);
    setCurrentStatus(newStatus);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const statusInfo = StatusManager.getStatusBySeverity(newStatus);
    if (statusInfo) {
      console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• status ‡πÉ‡∏´‡∏°‡πà:', {
        color: statusInfo.color,
        label: statusInfo.label,
        severity: statusInfo.severity,
        animationType: statusInfo.animationType,
        description: statusInfo.description
      });
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö status ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  const toggleStatus = () => {
    const nextStatus = StatusManager.getNextStatus(currentStatus);
    changeStatus(nextStatus);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á status configuration
  const updateStatusLabel = (severity: MarkerSeverity, newLabel: string) => {
    const updatedStatus = StatusManager.updateStatusConfig(severity, { label: newLabel });
    if (updatedStatus) {
      setStatusConfig([...StatusManager.getAllStatuses()]);
      console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï label ‡∏Ç‡∏≠‡∏á ${severity} ‡πÄ‡∏õ‡πá‡∏ô "${newLabel}"`);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reset configuration
  const resetConfig = () => {
    StatusManager.resetStatusConfig();
    setStatusConfig([...StatusManager.getAllStatuses()]);
    console.log('üîÑ Reset status configuration ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
  };

  // ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö status configuration ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const getCurrentStatusInfo = () => {
    return StatusManager.getStatusBySeverity(currentStatus);
  };

  const currentStatusInfo = getCurrentStatusInfo();

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-lg">
      <h1 className="text-2xl font-bold mb-6 text-gray-800">
        Status Management System - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      </h1>

      {/* ‡πÅ‡∏™‡∏î‡∏á status ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
      <div className="mb-6 p-4 border rounded-lg bg-gray-50">
        <h2 className="text-lg font-semibold mb-3">Status ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h2>
        <div className="flex items-center gap-4">
          <div className={`w-8 h-8 rounded-full ${currentStatusInfo?.bg || 'bg-gray-400'}`}></div>
          <div>
            <div className="font-medium">{currentStatusInfo?.label}</div>
            <div className="text-sm text-gray-600">{currentStatusInfo?.description}</div>
            <div className="text-xs text-gray-500">
              ‡∏™‡∏µ: {currentStatusInfo?.color} | Animation: {currentStatusInfo?.animationType}
            </div>
          </div>
        </div>
      </div>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold mb-3">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Status</h2>
        <div className="flex gap-3">
          {statusConfig.map((status) => (
            <button
              key={status.severity}
              onClick={() => changeStatus(status.severity)}
              className={`px-4 py-2 rounded-lg transition-all duration-200 ${
                status.severity === currentStatus
                  ? `${status.bg} text-white ring-2 ring-offset-2 ring-gray-400`
                  : `${status.bg} ${status.hover} text-white opacity-70 hover:opacity-100`
              }`}
            >
              {status.label}
            </button>
          ))}
        </div>
        <button
          onClick={toggleStatus}
          className="mt-3 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors"
        >
          ‡∏™‡∏•‡∏±‡∏ö Status ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        </button>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold mb-3">‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Status</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          
          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô */}
          <div className="p-3 border rounded-lg">
            <h3 className="font-medium mb-2">‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Marker</h3>
            <div className={`w-12 h-12 rounded-full ${currentStatusInfo?.bg} mx-auto`}></div>
            <p className="text-center text-sm mt-2">{currentStatusInfo?.color}</p>
          </div>

          {/* ‡πÅ‡∏™‡∏î‡∏á animation ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô */}
          <div className="p-3 border rounded-lg">
            <h3 className="font-medium mb-2">Animation Effect</h3>
            <div className="text-center">
              {currentStatusInfo?.animationType === 'emergency' && (
                <div className={`w-12 h-12 rounded-full ${currentStatusInfo.bg} mx-auto animate-pulse`}>
                  <div className="absolute inset-0 rounded-full border-2 border-red-400 animate-ping"></div>
                </div>
              )}
              {currentStatusInfo?.animationType === 'warning' && (
                <div className={`w-12 h-12 rounded-full ${currentStatusInfo.bg} mx-auto animate-bounce`}></div>
              )}
              {currentStatusInfo?.animationType === 'none' && (
                <div className={`w-12 h-12 rounded-full ${currentStatusInfo.bg} mx-auto`}></div>
              )}
            </div>
            <p className="text-center text-sm mt-2">{currentStatusInfo?.animationType}</p>
          </div>

          {/* ‡πÅ‡∏™‡∏î‡∏á priority */}
          <div className="p-3 border rounded-lg">
            <h3 className="font-medium mb-2">Priority Level</h3>
            <div className="text-center">
              <div className="text-2xl font-bold">{currentStatusInfo?.priority}</div>
              <p className="text-sm">
                {currentStatusInfo?.priority === 1 && '‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'}
                {currentStatusInfo?.priority === 2 && '‡∏Å‡∏•‡∏≤‡∏á'}
                {currentStatusInfo?.priority === 3 && '‡∏õ‡∏Å‡∏ï‡∏¥'}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á configuration */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold mb-3">‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á Status Configuration</h2>
        <div className="space-y-3">
          {statusConfig.map((status) => (
            <div key={status.severity} className="flex items-center gap-3 p-3 border rounded-lg">
              <div className={`w-6 h-6 rounded-full ${status.bg}`}></div>
              <div className="flex-1">
                <input
                  type="text"
                  value={status.label}
                  onChange={(e) => updateStatusLabel(status.severity, e.target.value)}
                  className="w-full px-2 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div className="text-sm text-gray-600">
                {status.severity} - Priority: {status.priority}
              </div>
            </div>
          ))}
        </div>
        <button
          onClick={resetConfig}
          className="mt-3 px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-colors"
        >
          Reset Configuration
        </button>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• status ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold mb-3">Status Configuration ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
        <div className="bg-gray-100 p-4 rounded-lg overflow-x-auto">
          <pre className="text-sm">
            {JSON.stringify(statusConfig, null, 2)}
          </pre>
        </div>
      </div>

      {/* ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
      <div className="bg-blue-50 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
        <ul className="text-sm space-y-1 text-blue-800">
          <li>1. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á</li>
          <li>2. ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏µ, animation, ‡πÅ‡∏•‡∏∞ priority</li>
          <li>3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç label ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ status ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô "‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á Status Configuration"</li>
          <li>4. ‡∏Å‡∏î "Reset Configuration" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</li>
          <li>5. ‡∏î‡∏π configuration ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á</li>
        </ul>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Console */}
      <div className="mt-4 text-sm text-gray-600">
        üí° ‡πÄ‡∏õ‡∏¥‡∏î Developer Console (F12) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á status
      </div>
    </div>
  );
};

export default StatusExample; 