import { Form, Input, Select, Button } from "antd";
import { useEffect, useState, useRef, useMemo } from "react";
import { dataSelectPlan } from "../../../stores/interfaces/SosWarning";
import { getAddress, createMarker, updateMarker } from "../service/api/SOSwarning";
import { MarkerProcess } from "../../../stores/interfaces/SosWarning";
import { dataAllMap } from "../../../stores/interfaces/SosWarning";
import ConfirmModal from "../../../components/common/ConfirmModal";
import SuccessModal from "../../../components/common/SuccessModal";
interface FormVillageLocationProps {
    onCancel?: () => void;
    onConfirm?: () => void;
    latitude?: string;
    longitude?: string;
    selectedMarker?: {
        id: number | string;
        name: string;
        x: number;
        y: number;
        originalX: number;
        originalY: number;
        group: string;
        color: string;
        address?: string;
        tel1?: string;
        tel2?: string;
        tel3?: string;
        unitID?: number;

    } | null;
    onMarkerNameChange?: (markerId: number | string, newName: string) => void;
    onMarkerAddressChange?: (markerId: number | string, newAddress: string) => void;
    onMarkerTel1Change?: (markerId: number | string, newTel1: string) => void;
    onMarkerTel2Change?: (markerId: number | string, newTel2: string) => void;
    onMarkerTel3Change?: (markerId: number | string, newTel3: string) => void;
    onMarkerUpdate?: (markerId: string, updatedMarker: any) => void; // ‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    mapMode?: 'preview' | 'work-it';
    shouldFocusNameInput?: boolean;
    onFocusHandled?: () => void;
    dataSelectPlan?: dataSelectPlan;
    isCreatingMode?: boolean;
    planType: string;
    onMarkerDelete?: (markerId: number) => void;
    idVillage: string;
    setShouldShowVillageForm: (status: boolean) => void;
    setDataMapAll: (data: any) => void;
    onMarkerSelect?: (marker: any | null) => void;
    hasActiveMarker?: boolean; // ‡πÄ‡∏û‡∏¥‡πà‡∏° prop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ active marker ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    editMarkerData?: any;
    onEditMarkerData?: (data: any) => void;
}

const FormVillageLocation = ({ onCancel, onConfirm, latitude,
    longitude, selectedMarker, onMarkerNameChange,
    onMarkerAddressChange, onMarkerTel1Change, onMarkerTel2Change,
    onMarkerTel3Change, onMarkerUpdate, mapMode = 'work-it', shouldFocusNameInput,
    onFocusHandled, dataSelectPlan, isCreatingMode, planType,
    onMarkerDelete, idVillage, setDataMapAll, onMarkerSelect, hasActiveMarker,
    editMarkerData, onEditMarkerData, setShouldShowVillageForm }: FormVillageLocationProps) => {
    const [form] = Form.useForm();
    const [isFormValid, setIsFormValid] = useState(false);
    const nameInputRef = useRef<any>(null);
    const [isUserInputting, setIsUserInputting] = useState(false);
    const lastUserSelectedAddress = useRef<string | null>(null);
    const currentMarkerIdRef = useRef<number | string | null>(null);
    const isUserInputtingRef = useRef<boolean>(false);
    const originalMarkerDataRef = useRef<any>(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Ç‡∏≠‡∏á marker
    const allMarkersOriginalDataRef = useRef<{ [key: string]: any }>({}); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Ç‡∏≠‡∏á marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const isResetingMarkerRef = useRef<boolean>(false); // flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop
    const isUserFocusedRef = useRef<boolean>(false); // flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á focus ‡∏ó‡∏µ‡πà input ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
    const isUserInteractingRef = useRef<boolean>(false); // flag ‡∏£‡∏ß‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á interact ‡∏Å‡∏±‡∏ö form ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
    const lastFormUpdateTimeRef = useRef<number>(0);
    const isCancellingRef = useRef<boolean>(false); // flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î cancel // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà update form

    // Debug useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hasActiveMarker
    useEffect(() => {
        console.log('üîç hasActiveMarker changed:', {
            hasActiveMarker,
            selectedMarker: !!selectedMarker,
            selectedMarkerID: selectedMarker?.id,
            timestamp: new Date().toISOString()
        });
    }, [hasActiveMarker, selectedMarker]);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ latitude ‡πÅ‡∏•‡∏∞ longitude ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    useEffect(() => {
        console.log('FormVillageLocation useEffect - received props:', { latitude, longitude });
        if (latitude !== undefined && longitude !== undefined) {
            console.log('FormVillageLocation - updating form values:', { latitude, longitude });
            form.setFieldsValue({
                latitude: latitude,
                longitude: longitude
            });
        }
    }, [latitude, longitude, form]);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ address ‡∏Ç‡∏≠‡∏á marker ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å marker ‡πÉ‡∏´‡∏°‡πà
    useEffect(() => {
        console.log('üîç useEffect triggered - checking if should update form');
        console.log('üîç Current props:', {
            hasSelectedMarker: !!selectedMarker,
            selectedMarkerId: selectedMarker?.id,
            hasActiveMarker,
            isCancelling: isCancellingRef.current
        });

        // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ cancelling ‡πÉ‡∏´‡πâ skip ‡∏Å‡∏≤‡∏£ update
        if (isCancellingRef.current) {
            console.log('üö´ Form is cancelling, skipping useEffect update');
            return;
        }

        // ‡∏ñ‡πâ‡∏≤ selectedMarker ‡πÄ‡∏õ‡πá‡∏ô null ‡πÉ‡∏´‡πâ skip ‡∏Å‡∏≤‡∏£ update ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ enable form ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if (!selectedMarker) {
            console.log('üö´ selectedMarker is null, skipping useEffect update to prevent re-enabling form');
            return;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hasActiveMarker - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ active marker ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (‡πÄ‡∏û‡∏∑‡πà‡∏≠ unlock marker)
        if (!hasActiveMarker) {
            console.log('‚ö†Ô∏è hasActiveMarker is false - this could be unlock marker scenario, proceeding anyway');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ unlock marker ‡πÄ‡∏î‡∏¥‡∏°
        const isMarkerChanged = selectedMarker && currentMarkerIdRef.current !== selectedMarker.id;
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ unlock marker: ‡∏ñ‡πâ‡∏≤ marker ID ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å clear ‡∏´‡∏£‡∏∑‡∏≠ cancel
        const isMarkerReselected = selectedMarker && (
            currentMarkerIdRef.current === null || // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å cancel
            (currentMarkerIdRef.current !== selectedMarker.id && lastFormUpdateTimeRef.current === 0) // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å reset
        );
        const now = Date.now();

        console.log('üîç Current state:', {
            isMarkerChanged,
            isMarkerReselected,
            currentMarkerId: currentMarkerIdRef.current,
            newMarkerId: selectedMarker?.id,
            isUserInputting: isUserInputtingRef.current,
            isUserInteracting: isUserInteractingRef.current,
            isUserFocused: isUserFocusedRef.current,
            timeSinceLastUpdate: now - lastFormUpdateTimeRef.current,
            isCancelling: isCancellingRef.current
        });

        // ‡∏ñ‡πâ‡∏≤ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á interact ‡∏Å‡∏±‡∏ö form ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker ‡∏´‡∏£‡∏∑‡∏≠ reselect marker ‡πÉ‡∏´‡πâ skip ‡∏Å‡∏≤‡∏£ update
        const hasActiveElement = document.activeElement && document.activeElement.tagName.match(/input|select|textarea/i);
        const isUserCurrentlyActive = isUserInputtingRef.current || isUserInteractingRef.current || isUserFocusedRef.current || hasActiveElement;

        if (isUserCurrentlyActive && !isMarkerChanged && !isMarkerReselected) {
            console.log('üö´ User is actively interacting with form, BLOCKING useEffect updates (but allowing marker change)');
            console.log('üö´ Interaction state:', {
                isUserInputting: isUserInputtingRef.current,
                isUserInteracting: isUserInteractingRef.current,
                isUserFocused: isUserFocusedRef.current,
                hasActiveElement: hasActiveElement,
                activeElementTag: document.activeElement?.tagName,
                activeElementType: (document.activeElement as any)?.type,
                isMarkerChanged
            });
            return;
        }

        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker ‡∏´‡∏£‡∏∑‡∏≠ reselect marker ‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà user ‡∏Å‡∏≥‡∏•‡∏±‡∏á interact ‡πÉ‡∏´‡πâ reset flags ‡∏Å‡πà‡∏≠‡∏ô
        if ((isMarkerChanged || isMarkerReselected) && isUserCurrentlyActive) {
            console.log('üîÑ Marker changed/reselected while user interacting - resetting flags to allow update');
            setIsUserInputting(false);
            isUserInputtingRef.current = false;
            isUserFocusedRef.current = false;
            isUserInteractingRef.current = false;
        }

        // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£ update form ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ skip (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker ‡∏´‡∏£‡∏∑‡∏≠ reselect)
        if (now - lastFormUpdateTimeRef.current < 1000 && !isMarkerChanged && !isMarkerReselected) {
            console.log('üö´ Recent form update detected, skipping to prevent flicker');
            return;
        }

        console.log('‚úÖ Proceeding with useEffect update');

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï lastUserSelectedAddress ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ reselect marker
        if ((isMarkerChanged || isMarkerReselected) && !isResetingMarkerRef.current) {
            console.log('üîÑ Marker changed/reselected from', currentMarkerIdRef.current, 'to', selectedMarker?.id);

            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reset marker ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
            // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            lastUserSelectedAddress.current = null;
            currentMarkerIdRef.current = selectedMarker.id;

            console.log('‚úÖ Updated currentMarkerIdRef to:', selectedMarker.id);

            // Reset interaction flags ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ form ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏î‡πâ
            console.log('üîì Marker changed - resetting all interaction flags to allow form update');
            setIsUserInputting(false);
            isUserInputtingRef.current = false;
            isUserFocusedRef.current = false;
            isUserInteractingRef.current = false;

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Ç‡∏≠‡∏á marker ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Å‡πá‡∏ö)
            const currentMarkerId = selectedMarker.id.toString();
            if (!allMarkersOriginalDataRef.current[currentMarkerId]) {
                const markerAddressData = (selectedMarker as any)?.addressData;

                const originalData = {
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ addressData ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å API ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á marker
                    originalName: markerAddressData?.user?.givenName || markerAddressData?.givenName || selectedMarker.name || '',
                    originalTel1: markerAddressData?.user?.contact || markerAddressData?.contact || selectedMarker.tel1 || '',
                    originalTel2: markerAddressData?.user?.contact2 || markerAddressData?.contact2 || selectedMarker.tel2 || '',
                    originalTel3: markerAddressData?.user?.contact3 || markerAddressData?.contact3 || selectedMarker.tel3 || '',
                    address: (selectedMarker as any)?.unitID || selectedMarker.address,
                    addressData: markerAddressData,
                    markerId: selectedMarker.id,
                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
                    x: selectedMarker.x,
                    y: selectedMarker.y,
                    originalX: selectedMarker.originalX,
                    originalY: selectedMarker.originalY,
                    group: selectedMarker.group,
                    color: selectedMarker.color,
                    unitID: (selectedMarker as any)?.unitID
                };

                allMarkersOriginalDataRef.current[currentMarkerId] = originalData;
                console.log('Stored original data for marker:', currentMarkerId, originalData);
            }

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó originalMarkerDataRef ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á marker ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            originalMarkerDataRef.current = allMarkersOriginalDataRef.current[currentMarkerId];
        }

        // Set ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å marker ‡∏•‡∏á form  
        if (selectedMarker) {
            console.log('üìã Processing selectedMarker:', {
                id: selectedMarker.id,
                name: selectedMarker.name,
                address: selectedMarker.address,
                unitID: (selectedMarker as any)?.unitID
            });

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Ç‡∏≠‡∏á marker ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Å‡πá‡∏ö
            const currentMarkerId = selectedMarker.id.toString();
            if (!allMarkersOriginalDataRef.current[currentMarkerId]) {
                const initialAddressData = (selectedMarker as any)?.addressData;
                const originalData = {
                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö - ‡πÉ‡∏ä‡πâ addressData ‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á marker
                    originalName: initialAddressData?.user?.givenName || initialAddressData?.givenName || selectedMarker.name || '',
                    originalTel1: initialAddressData?.user?.contact || initialAddressData?.contact || selectedMarker.tel1 || '',
                    originalTel2: initialAddressData?.user?.contact2 || initialAddressData?.contact2 || selectedMarker.tel2 || '',
                    originalTel3: initialAddressData?.user?.contact3 || initialAddressData?.contact3 || selectedMarker.tel3 || '',
                    address: (selectedMarker as any)?.unitID || selectedMarker.address,
                    addressData: initialAddressData,
                    markerId: selectedMarker.id,
                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
                    x: selectedMarker.x,
                    y: selectedMarker.y,
                    originalX: selectedMarker.originalX,
                    originalY: selectedMarker.originalY,
                    group: selectedMarker.group,
                    color: selectedMarker.color,
                    unitID: (selectedMarker as any)?.unitID
                };
                allMarkersOriginalDataRef.current[currentMarkerId] = originalData;
                console.log('Stored initial marker data:', currentMarkerId, originalData);
            }

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó originalMarkerDataRef ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á marker ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            originalMarkerDataRef.current = allMarkersOriginalDataRef.current[currentMarkerId];

            const updateFields: any = {};

            // Set address ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            const addressToUse = (selectedMarker as any)?.unitID || selectedMarker.address;
            if (addressToUse) {
                updateFields.address = addressToUse;
            }

            // ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å marker ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô input ‡∏ï‡∏£‡∏á‡πÜ
            const markerAddressData = (selectedMarker as any)?.addressData;
            console.log('üìä Marker addressData:', markerAddressData);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö name: ‡πÉ‡∏ä‡πâ addressData ‡∏Å‡πà‡∏≠‡∏ô (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API) ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏ä‡πâ marker.name
            if (markerAddressData?.user?.givenName || markerAddressData?.givenName) {
                // ‡∏°‡∏µ name ‡∏à‡∏≤‡∏Å addressData (API) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô
                updateFields.name = markerAddressData.user?.givenName || markerAddressData.givenName;
                console.log('üéØ Using name from addressData:', updateFields.name);
            } else if (selectedMarker.name && selectedMarker.name.trim() !== '') {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ name ‡∏à‡∏≤‡∏Å API ‡πÅ‡∏ï‡πà marker ‡∏°‡∏µ name ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ marker.name ‡πÄ‡∏õ‡πá‡∏ô address ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ pattern ‡∏Ç‡∏≠‡∏á address)
                const isAddressPattern = /^\d+\/\d+$|^\d+$/.test(selectedMarker.name.trim());
                if (!isAddressPattern) {
                    updateFields.name = selectedMarker.name;
                    console.log('üéØ Using marker name (not address pattern):', updateFields.name);
                } else {
                    updateFields.name = ''; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô address pattern ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á
                    console.log('üéØ Marker name looks like address, setting empty');
                }
            } else {
                updateFields.name = ''; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• name ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á
                console.log('üéØ No name data available, setting empty');
            }

            // Set tel fields ‡∏à‡∏≤‡∏Å addressData ‡∏´‡∏£‡∏∑‡∏≠ marker
            if (markerAddressData?.user && Object.keys(markerAddressData.user).length > 0) {
                // ‡∏°‡∏µ user data ‡πÉ‡∏ô addressData
                if (markerAddressData.user.contact) updateFields.tel1 = markerAddressData.user.contact;
                if (markerAddressData.user.contact2) updateFields.tel2 = markerAddressData.user.contact2;
                if (markerAddressData.user.contact3) updateFields.tel3 = markerAddressData.user.contact3;
            } else {
                // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å selectedMarker ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
                console.log('else-empty')
                updateFields.tel1 = selectedMarker.tel1 || '';
                updateFields.tel2 = selectedMarker.tel2 || '';
                updateFields.tel3 = selectedMarker.tel3 || '';
            }

            // Set ‡∏Ñ‡πà‡∏≤‡∏•‡∏á form - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker ‡πÄ‡∏™‡∏°‡∏≠, ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏Å‡∏≤‡∏£ reset ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á input
            const isUserCurrentlyInteracting = isUserFocusedRef.current ||
                isUserInputtingRef.current ||
                isUserInteractingRef.current ||
                (document.activeElement && document.activeElement.tagName.match(/input|select|textarea/i));

            const shouldUpdateForm = isMarkerChanged || isMarkerReselected || // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker ‡πÅ‡∏•‡∏∞ reselect ‡πÄ‡∏™‡∏°‡∏≠
                (!isUserCurrentlyInteracting && (now - lastFormUpdateTimeRef.current >= 2000));

            if (shouldUpdateForm) {
                console.log('‚úÖ Setting form values for marker:', selectedMarker.id);
                console.log('‚úÖ Update fields:', updateFields);
                console.log('‚úÖ Update reason:', 
                    isMarkerChanged ? 'Marker changed' : 
                    isMarkerReselected ? 'Marker reselected' : 
                    'Safe to update');

                // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö update form ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô marker
                form.setFieldsValue(updateFields);
                lastFormUpdateTimeRef.current = now;

                console.log('‚úÖ Form updated successfully for marker:', selectedMarker.id);
            } else {
                console.log('üö´ User is interacting, skipping form update to prevent reset');
                console.log('üö´ Marker ID:', selectedMarker.id);
                console.log('üö´ Flags:', {
                    isUserFocused: isUserFocusedRef.current,
                    isUserInputting: isUserInputtingRef.current,
                    isUserInteracting: isUserInteractingRef.current,
                    activeElement: document.activeElement?.tagName,
                    isUserCurrentlyInteracting,
                    timeSinceLastUpdate: now - lastFormUpdateTimeRef.current,
                    isMarkerChanged
                });
            }
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó form (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ cancel ‡πÅ‡∏•‡∏∞‡∏°‡∏µ active marker)
        if (!isCancellingRef.current && hasActiveMarker) {
            validateForm();
        } else {
            console.log('üö´ Skipping validation in useEffect:', { 
                isCancelling: isCancellingRef.current, 
                hasActiveMarker 
            });
        }
    }, [selectedMarker?.id, form]); // ‡∏•‡∏ö addressData ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å deps ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£ trigger ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

    // useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö focus ‡∏ó‡∏µ‡πà input Name ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÉ‡∏´‡∏°‡πà
    useEffect(() => {
        if (shouldFocusNameInput && nameInputRef.current) {
            console.log('FormVillageLocation - Focusing on Name input');
            // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ DOM ‡∏ñ‡∏π‡∏Å render ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            setTimeout(() => {
                nameInputRef.current?.focus();
                if (onFocusHandled) {
                    onFocusHandled();
                }
            }, 100);
        }
    }, [shouldFocusNameInput, onFocusHandled]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation
    const validateForm = () => {
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô validation ‡∏Ç‡∏ì‡∏∞ cancel
        if (isCancellingRef.current) {
            console.log('üö´ Skipping validation during cancel operation');
            return;
        }

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô validation ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ active marker - ‡πÅ‡∏ï‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ marker
        if (!hasActiveMarker && !selectedMarker) {
            console.log('üö´ Skipping validation - no active marker and no selected marker');
            setIsFormValid(false); // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö disable ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ active marker
            return;
        }

        const values = form.getFieldsValue();
        console.log('validateForm - current values:', values);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á address ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const hasAddress = values.address !== undefined && values.address !== null && values.address !== '';

        // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ valid ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ selectedMarker ‡∏´‡∏£‡∏∑‡∏≠ hasActiveMarker
        const canValidate = hasActiveMarker || !!selectedMarker;

        console.log('validateForm - validation result:', {
            hasAddress,
            hasActiveMarker,
            selectedMarker: !!selectedMarker,
            canValidate,
            isValid: hasAddress && canValidate
        });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isFormValid ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ marker ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏°‡∏µ address
        setIsFormValid(hasAddress && canValidate);
    };

    // useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô form ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ marker ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    useEffect(() => {
        if (!hasActiveMarker && !selectedMarker && !isCancellingRef.current) {
            console.log('FormVillageLocation - No active marker and no selected marker, clearing form fields');
            form.resetFields();
            
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flags ‡πÅ‡∏•‡∏∞ refs
            isUserInputtingRef.current = false;
            isUserFocusedRef.current = false;
            isUserInteractingRef.current = false;
            setIsUserInputting(false);
            lastUserSelectedAddress.current = null;
            currentMarkerIdRef.current = null;
            
            // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö disable form ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ marker ‡πÄ‡∏•‡∏¢
            setIsFormValid(false);
        } else if (isCancellingRef.current) {
            console.log('üö´ Skipping form clear during cancel operation');
        } else if (selectedMarker || hasActiveMarker) {
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ selectedMarker ‡∏´‡∏£‡∏∑‡∏≠ hasActiveMarker ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å validateForm ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            console.log('FormVillageLocation - Have selectedMarker or hasActiveMarker, running validation');
            validateForm();
        }
    }, [hasActiveMarker, selectedMarker, form, validateForm]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï marker ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å API
    const resetMarkerToOriginal = (markerId: number | string, originalData: any) => {
        console.log('Resetting marker', markerId, 'to original API data:', originalData);

        // ‡∏´‡∏≤ roomAddress ‡∏à‡∏≤‡∏Å dataSelectPlan
        const selectedUnit = dataSelectPlan?.unit?.find((unit: any) => unit.id === Number(originalData.address));
        const roomAddressText = selectedUnit?.roomAddress || originalData.originalName || '';

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        const resetMarkerData = {
            ...originalData, // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            id: markerId,
            name: roomAddressText,
            tel1: originalData.originalTel1 || '',
            tel2: originalData.originalTel2 || '',
            tel3: originalData.originalTel3 || '',
            address: originalData.address || '',
            addressData: originalData.addressData,
            roomAddress: roomAddressText,
            // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ x, y ‡∏à‡∏≤‡∏Å originalX, originalY
            x: originalData.originalX,
            y: originalData.originalY,
            // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤ originalX, originalY ‡πÑ‡∏ß‡πâ
            originalX: originalData.originalX,
            originalY: originalData.originalY,
            group: originalData.group,
            color: originalData.color,
            unitID: originalData.unitID
        };

        console.log('Reset marker to original values:', resetMarkerData);

        // ‡πÉ‡∏ä‡πâ onMarkerUpdate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        if (onMarkerUpdate) {
            onMarkerUpdate(markerId.toString(), resetMarkerData);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ focus/blur ‡∏ó‡∏µ‡πà input fields
    const handleInputFocus = () => {
        console.log('üö´ User focused on input field - STRONGLY blocking all form updates');
        isUserFocusedRef.current = true;
        isUserInteractingRef.current = true;
        setIsUserInputting(true);
        isUserInputtingRef.current = true;
        lastFormUpdateTimeRef.current = Date.now(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà user ‡πÄ‡∏£‡∏¥‡πà‡∏° focus
    };

    const handleInputBlur = () => {
        console.log('‚úÖ User blurred from input field - will unlock after extended delay');
        // ‡πÉ‡∏ä‡πâ delay ‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ refresh ‡πÄ‡∏°‡∏∑‡πà‡∏≠ click marker ‡∏≠‡∏∑‡πà‡∏ô
        setTimeout(() => {
            isUserFocusedRef.current = false;
            setIsUserInputting(false);
            console.log('üîì Focus flag unlocked');

            // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡πà‡∏≠‡∏ô unlock interaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition
            setTimeout(() => {
                isUserInputtingRef.current = false;
                setTimeout(() => {
                    isUserInteractingRef.current = false;
                    console.log('üîì All form interaction flags fully unlocked');
                }, 100); // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏ï‡πá‡∏°
            }, 100);
        }, 50);
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠
    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const newName = e.target.value;

        // Set strong protection flags ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
        isUserInputtingRef.current = true;
        isUserInteractingRef.current = true;
        setIsUserInputting(true);
        lastFormUpdateTimeRef.current = Date.now();
        console.log('üö´ User typing name - BLOCKING all form updates');

        if (selectedMarker && onMarkerNameChange) {
            console.log('FormVillageLocation - name changed:', newName, 'for marker:', selectedMarker.id);
            onMarkerNameChange(selectedMarker.id, newName);
        }
        if (hasActiveMarker) {
            validateForm();
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç address
    const handleAddressChange = async (value: string) => {
        console.log('üîç handleAddressChange value:', value);
        console.log('üîç dataSelectPlan:', dataSelectPlan);
        console.log('üîç selectedMarker:', selectedMarker);

        try {
            if (selectedMarker && onMarkerAddressChange) {
                let storeAddress = await getAddress(Number(value))

                if (storeAddress.status) {
                    console.log('üéØ API Response Success:', storeAddress.result);

                    // ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å API
                    let apiName = storeAddress.result.user?.givenName || storeAddress.result.givenName || '';
                    let tel = storeAddress.result.user?.contact || storeAddress.result.contact || '';
                    let tel2 = storeAddress.result.user?.contact2 || storeAddress.result.contact2 || '';
                    let tel3 = storeAddress.result.user?.contact3 || storeAddress.result.contact3 || '';

                    // ‡∏î‡∏∂‡∏á roomAddress ‡∏à‡∏≤‡∏Å dataSelectPlan.unit
                    const selectedUnit = dataSelectPlan?.unit?.find((unit: any) => unit.id === Number(value));
                    console.log('üîç Selected Unit:', selectedUnit);
                    console.log('üîç Selected Unit ID:', Number(value));
                    
                    // ‡∏î‡∏∂‡∏á roomAddress ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤
                    const roomAddressText = selectedUnit?.roomAddress || '';
                    console.log('üîç roomAddressText:', roomAddressText);

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker name ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢ roomAddress
                    if (selectedMarker && onMarkerNameChange && roomAddressText) {
                        console.log('üéØ Updating marker name with roomAddress:', roomAddressText);
                        console.log('üéØ Marker ID:', selectedMarker.id);
                        onMarkerNameChange(selectedMarker.id, roomAddressText);
                    } else {
                        console.log('‚ùå Cannot update marker name:', {
                            hasSelectedMarker: !!selectedMarker,
                            hasOnMarkerNameChange: !!onMarkerNameChange,
                            hasRoomAddressText: !!roomAddressText
                        });
                    }

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô form
                    const fieldsToUpdate = {
                        name: apiName,
                        tel1: tel,
                        tel2: tel2,
                        tel3: tel3,
                    };
                    form.setFieldsValue(fieldsToUpdate);

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó address
                    if (selectedMarker && onMarkerAddressChange) {
                        console.log('üéØ Updating marker address:', value);
                        onMarkerAddressChange(selectedMarker.id, value);
                    }
                } else {
                    console.log('‚ùå API Response Fail:', storeAddress.result);
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå fields
                    const clearFields = {
                        name: '',
                        tel1: '',
                        tel2: '',
                        tel3: '',
                    };
                    form.setFieldsValue(clearFields);
                }
            }
        } catch (error) {
            console.log('‚ùå catch error:', error)
            console.error('‚ùå Error in handleAddressChange:', error);
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå fields
            const clearFields = {
                name: '',
                tel1: '',
                tel2: '',
                tel3: '',
            };
            form.setFieldsValue(clearFields);
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ validateForm ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ address (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ active marker)
        if (hasActiveMarker) {
            validateForm();
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç tel1
    const handleTel1Change = (e: React.ChangeEvent<HTMLInputElement>) => {
        let newTel1 = e.target.value.replace(/\D/g, '').slice(0, 10); // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 ‡∏ï‡∏±‡∏ß

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        if (newTel1.length > 0 && !newTel1.startsWith('0')) {
            newTel1 = '0' + newTel1.slice(0, 9); // ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 10 ‡∏ï‡∏±‡∏ß
        }

        // Set strong protection flags ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
        isUserInputtingRef.current = true;
        isUserInteractingRef.current = true;
        setIsUserInputting(true);
        lastFormUpdateTimeRef.current = Date.now();
        console.log('üö´ User typing tel1 - BLOCKING all form updates');

        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ form.setFieldsValue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ reset ‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô
        // ‡πÉ‡∏´‡πâ antd ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ value ‡∏ú‡πà‡∏≤‡∏ô controlled component ‡πÅ‡∏ó‡∏ô

        if (selectedMarker && onMarkerTel1Change) {
            console.log('FormVillageLocation - tel1 changed:', newTel1, 'for marker:', selectedMarker.id);
            onMarkerTel1Change(selectedMarker.id, newTel1);
        }
        if (hasActiveMarker) {
            validateForm();
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç tel2
    const handleTel2Change = (e: React.ChangeEvent<HTMLInputElement>) => {
        let newTel2 = e.target.value.replace(/\D/g, '').slice(0, 10); // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 ‡∏ï‡∏±‡∏ß

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        if (newTel2.length > 0 && !newTel2.startsWith('0')) {
            newTel2 = '0' + newTel2.slice(0, 9); // ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 10 ‡∏ï‡∏±‡∏ß
        }

        // Set strong protection flags ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
        isUserInputtingRef.current = true;
        isUserInteractingRef.current = true;
        setIsUserInputting(true);
        lastFormUpdateTimeRef.current = Date.now();
        console.log('üö´ User typing tel2 - BLOCKING all form updates');

        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ form.setFieldsValue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ reset ‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô
        // ‡πÉ‡∏´‡πâ antd ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ value ‡∏ú‡πà‡∏≤‡∏ô controlled component ‡πÅ‡∏ó‡∏ô

        if (selectedMarker && onMarkerTel2Change) {
            console.log('FormVillageLocation - tel2 changed:', newTel2, 'for marker:', selectedMarker.id);
            onMarkerTel2Change(selectedMarker.id, newTel2);
        }
        if (hasActiveMarker) {
            validateForm();
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç tel3
    const handleTel3Change = (e: React.ChangeEvent<HTMLInputElement>) => {
        let newTel3 = e.target.value.replace(/\D/g, '').slice(0, 10); // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 ‡∏ï‡∏±‡∏ß

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        if (newTel3.length > 0 && !newTel3.startsWith('0')) {
            newTel3 = '0' + newTel3.slice(0, 9); // ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 10 ‡∏ï‡∏±‡∏ß
        }

        // Set strong protection flags ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
        isUserInputtingRef.current = true;
        isUserInteractingRef.current = true;
        setIsUserInputting(true);
        lastFormUpdateTimeRef.current = Date.now();
        console.log('üö´ User typing tel3 - BLOCKING all form updates');

        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ form.setFieldsValue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ reset ‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô
        // ‡πÉ‡∏´‡πâ antd ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ value ‡∏ú‡πà‡∏≤‡∏ô controlled component ‡πÅ‡∏ó‡∏ô

        if (selectedMarker && onMarkerTel3Change) {
            console.log('FormVillageLocation - tel3 changed:', newTel3, 'for marker:', selectedMarker.id);
            onMarkerTel3Change(selectedMarker.id, newTel3);
        }
        if (hasActiveMarker) {
            validateForm();
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Submit (Confirm)
    const handleSubmit = async () => {
        ConfirmModal({
            title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            message: "",
            okMessage: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
            cancelMessage: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            onOk: async () => {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà address)
                const values = form.getFieldsValue();
                if (!values.address) {
                    return;
                }
                console.log(values, 'values-test')
                console.log(selectedMarker, 'selectedMarker-test')
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• marker ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å form
                let colorStatus = {
                    "green": "normal",
                    "red": "emergency",
                    "yellow": "warning",
                }

                // ‡∏´‡∏≤ roomAddress ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö address ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                const selectedUnit = dataSelectPlan?.unit?.find((unit: any) => unit.id.toString() === values.address.toString());
                const markerName = selectedUnit?.roomAddress || values.name || '';

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ isCreatingMode prop
                const isCreateMode = isCreatingMode === true;
                const isUpdateMode = isCreatingMode === false;

                // console.log(selectedMarker,'selectedMarker')
                // return 
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
                if (isCreateMode) {
                    const markerData: MarkerProcess = {
                        villageId: idVillage,
                        unitId: Number(values.address), // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å form address ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô unitID
                        markerType: "marker",
                        markerInfo: {
                            // id: selectedMarker?.id?.toString() || "",
                            name: markerName, // ‡πÉ‡∏ä‡πâ roomAddress ‡πÅ‡∏ó‡∏ô name ‡∏à‡∏≤‡∏Å form
                            status: colorStatus[selectedMarker?.color as keyof typeof colorStatus],
                            position: {
                                x: selectedMarker?.x?.toFixed(2) || "",
                                y: selectedMarker?.y?.toFixed(2) || ""
                            },
                            size: 6,
                            rotationDegrees: "0¬∞",
                            group: selectedMarker?.group || ""
                        },
                    };
                    let data = await createMarker(markerData)
                    if (data.status) {
                        SuccessModal("‡∏™‡∏£‡πâ‡∏≤‡∏á Marker ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",900)
                        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
                        if (data.result && selectedMarker) {
                            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö structure ‡∏Ç‡∏≠‡∏á data.result
                            let newMarkerData = null;

                            // Case 1: data.result.marker ‡πÄ‡∏õ‡πá‡∏ô array - ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                            if (data.result.marker && Array.isArray(data.result.marker) && data.result.marker.length > 0) {
                                newMarkerData = data.result.marker[data.result.marker.length - 1];
                            }
                            // Case 2: data.result ‡πÄ‡∏õ‡πá‡∏ô marker object ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                            else if (data.result.id) {
                                newMarkerData = data.result;
                                console.log('Found marker in data.result directly:', newMarkerData);
                            }
                            // Case 3: data.result ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á markers - ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                            else if (Array.isArray(data.result) && data.result.length > 0) {
                                newMarkerData = data.result[data.result.length - 1];
                            }

                            if (newMarkerData) {
                                // ‡∏™‡∏£‡πâ‡∏≤‡∏á updated marker object ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
                                const updatedMarker = {
                                    ...selectedMarker, // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á selectedMarker ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô
                                    id: newMarkerData.id ? (typeof newMarkerData.id === 'string' ? newMarkerData.id : newMarkerData.id.toString()) : selectedMarker.id, // ‡πÅ‡∏õ‡∏•‡∏á id ‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ selectedMarker.id ‡πÄ‡∏î‡∏¥‡∏°
                                    name: markerName, // ‡πÉ‡∏ä‡πâ roomAddress ‡πÅ‡∏ó‡∏ô name ‡∏à‡∏≤‡∏Å form
                                    unitID: newMarkerData.unitID || newMarkerData.address || values.address, // ‡πÉ‡∏ä‡πâ unitID ‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å form
                                    address: values.address, // ‡πÉ‡∏ä‡πâ address ‡∏à‡∏≤‡∏Å form ‡πÄ‡∏™‡∏°‡∏≠
                                    roomAddress: newMarkerData.roomAddress || "",
                                    unitNo: newMarkerData.unitNo || "",
                                    tel1: values.tel1 || "", // ‡πÉ‡∏ä‡πâ tel ‡∏à‡∏≤‡∏Å form ‡πÄ‡∏™‡∏°‡∏≠
                                    tel2: values.tel2 || "",
                                    tel3: values.tel3 || ""
                                };

                                console.log('Updated marker with API data:', updatedMarker);

                                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î form
                                if (onMarkerUpdate) {
                                    // ‡πÅ‡∏õ‡∏•‡∏á selectedMarker.id ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á handleMarkerUpdate
                                    onMarkerUpdate(selectedMarker.id.toString(), updatedMarker);
                                }
                            } else {
                                console.log('Could not find marker data in API response');
                            }
                            if (data) {
                                console.log(data.result.marker,'data-marker')
                                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker
                                if (data.result.marker && Array.isArray(data.result.marker)) {
                                  setDataMapAll((prev: any) => ({
                                    ...prev,
                                    marker: data.result.marker
                                  }));
                                }
                            }


                        } else {
                            console.log('No data.result or selectedMarker');
                        }
                    }

                    // Reset focus/input flags ‡∏´‡∏•‡∏±‡∏á submit
                    isUserFocusedRef.current = false;
                    isUserInputtingRef.current = false;
                    isUserInteractingRef.current = false;
                    setIsUserInputting(false);
                    console.log('üîì All form interaction flags reset after create submit');

                    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å marker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á
                    if (onMarkerSelect) {
                        onMarkerSelect(null);
                    }

                    if (onConfirm) {
                        onConfirm();
                    }
                } else if (isUpdateMode) {

                    const markerData: MarkerProcess = {
                        markerId: selectedMarker?.id?.toString() || "",
                        villageId: idVillage,
                        unitId: Number(values.address), // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å form address ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô unitID
                        markerType: "marker",
                        markerInfo: {
                            // id: selectedMarker?.id || "",
                            name: markerName, // ‡πÉ‡∏ä‡πâ roomAddress ‡πÅ‡∏ó‡∏ô values.name
                            status: colorStatus[selectedMarker?.color as keyof typeof colorStatus],
                            position: {
                                x: selectedMarker?.x?.toFixed(2) || "",
                                y: selectedMarker?.y?.toFixed(2) || ""
                            },
                            size: 6,
                            rotationDegrees: "0¬∞",
                            group: selectedMarker?.group || ""
                        },
                    };


                    console.log(markerData, 'update marker data with unitId from form address:', markerData);

                    let data = await updateMarker(markerData)
                    if (data.status) {
                        console.log('update marker success')
                        SuccessModal("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Marker ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",900)
                        // ‡∏™‡∏£‡πâ‡∏≤‡∏á updatedMarker object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ originalX ‡πÅ‡∏•‡∏∞ originalY ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                        if (selectedMarker && selectedMarker.x !== undefined && selectedMarker.y !== undefined) {
                            const updatedMarker = {
                                ...selectedMarker,
                                name: markerName, // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢
                                address: values.address, // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó address ‡∏î‡πâ‡∏ß‡∏¢
                                tel1: values.tel1 || "",
                                tel2: values.tel2 || "",
                                tel3: values.tel3 || "",
                                originalX: selectedMarker.x, // set ‡∏Ñ‡πà‡∏≤ originalX ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                                originalY: selectedMarker.y, // set ‡∏Ñ‡πà‡∏≤ originalY ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                            };

                            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô allMarkersOriginalDataRef ‡∏î‡πâ‡∏ß‡∏¢
                            const currentMarkerId = selectedMarker.id.toString();
                            if (allMarkersOriginalDataRef.current[currentMarkerId]) {
                                allMarkersOriginalDataRef.current[currentMarkerId] = {
                                    ...allMarkersOriginalDataRef.current[currentMarkerId],
                                    x: selectedMarker.x,
                                    y: selectedMarker.y,
                                    originalX: selectedMarker.x,
                                    originalY: selectedMarker.y
                                };
                                console.log('Updated original data for marker:', currentMarkerId, allMarkersOriginalDataRef.current[currentMarkerId]);
                            }

                            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
                            if (onMarkerUpdate) {
                                console.log('FormVillageLocation - Calling onMarkerUpdate with originalX/Y:', updatedMarker);
                                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ wrapper function ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                                if ((window as any).villageMapOnMarkerUpdateRef?.current) {
                                    (window as any).villageMapOnMarkerUpdateRef.current(selectedMarker.id.toString(), updatedMarker);
                                } else {
                                    onMarkerUpdate(selectedMarker.id.toString(), updatedMarker);
                                }
                            }
                        }
                        if (data) {
                            console.log(data.result.marker,'data-marker')
                            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker
                            if (data.result.marker && Array.isArray(data.result.marker)) {
                              setDataMapAll((prev: any) => ({
                                ...prev,
                                marker: data.result.marker
                              }));
                            }
                        }


                    }

                    // Reset focus/input flags ‡∏´‡∏•‡∏±‡∏á submit
                    isUserFocusedRef.current = false;
                    isUserInputtingRef.current = false;
                    isUserInteractingRef.current = false;
                    setIsUserInputting(false);
                    console.log('üîì All form interaction flags reset after update submit');

                    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å marker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á
                    if (onMarkerSelect) {
                        onMarkerSelect(null);
                    }

                    if (onConfirm) {
                        onConfirm();
                    }
                }
            },
            onCancel: async () => {

            }
        });





    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ disable ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isFormDisabled = mapMode === 'preview';

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì addressDisabled ‡∏î‡πâ‡∏ß‡∏¢ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ update ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    const addressDisabled = useMemo(() => {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ enable ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ selectedMarker ‡πÅ‡∏•‡∏∞ hasActiveMarker ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ isFormValid ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô false
        // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ isFormValid ‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ address ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ user ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å address ‡πÑ‡∏î‡πâ
        const disabled = isFormDisabled || (!hasActiveMarker && !selectedMarker) || isCancellingRef.current;
        console.log('üîç useMemo addressDisabled calculation:', {
            hasActiveMarker,
            selectedMarker: !!selectedMarker,
            selectedMarkerID: selectedMarker?.id,
            isFormDisabled,
            isFormValid,
            isCancelling: isCancellingRef.current,
            disabled,
            timestamp: new Date().toISOString()
        });
        return disabled;
    }, [isFormDisabled, hasActiveMarker, selectedMarker, isFormValid]);

    // Debug ‡∏Å‡∏≤‡∏£ disable address
    console.log('üîç FormVillageLocation render - Address state:', {
        hasActiveMarker,
        selectedMarker: !!selectedMarker,
        selectedMarkerID: selectedMarker?.id,
        isFormDisabled,
        addressDisabled,
        timestamp: new Date().toISOString()
    });

    return (
        <div className=" mx-auto bg-[#F6F6F6] p-6 mt-4 lg:mt-0 h-full">
            <div className="font-semibold text-xl text-center mb-6">
                Pin the village location on the map
            </div>
            <Form
                form={form}
                layout="vertical"
            >
                <Form.Item
                    label={<span className="text-[#002C55]">Address </span>}
                    name="address"
                    rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Address' }]}
                >

                    <Select
                        showSearch
                        filterOption={(input, option) =>
                            (option?.children as unknown as string)
                                ?.toLowerCase()
                                ?.includes(input.toLowerCase()) ?? false
                        }
                        onChange={handleAddressChange}
                        disabled={addressDisabled}
                        onFocus={handleInputFocus}
                        onBlur={handleInputBlur}
                        placeholder={!hasActiveMarker ? "‡πÑ‡∏°‡πà‡∏°‡∏µ marker ‡∏ó‡∏µ‡πà active" : "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å address"}
                    >
                        {dataSelectPlan?.unit?.map((unit: any) => (
                            <Select.Option key={unit.id} value={unit.id}>
                                {unit?.roomAddress}
                            </Select.Option>
                        ))}
                    </Select>
                </Form.Item>
                <Form.Item
                    label={<span className="text-[#002C55]">Name </span>}
                    name="name"
                >
                    <Input
                        ref={nameInputRef}
                        disabled={true}
                        onChange={handleNameChange}
                        onFocus={handleInputFocus}
                        onBlur={handleInputBlur}
                    />
                </Form.Item>
                <Form.Item
                    label={<span className="text-[#002C55]">Tel 1 </span>}
                    name="tel1"
                >
                    <Input
                        onChange={handleTel1Change}
                        maxLength={10}
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 0985574483 (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0)"
                        disabled={isFormDisabled || true}
                        onFocus={handleInputFocus}
                        onBlur={handleInputBlur}
                    />
                </Form.Item>
                <Form.Item label={<span className="text-[#002C55]">Tel 2</span>} name="tel2">
                    <Input
                        onChange={handleTel2Change}
                        maxLength={10}
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 0985574484 (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0)"
                        disabled={isFormDisabled || true}
                        onFocus={handleInputFocus}
                        onBlur={handleInputBlur}
                    />
                </Form.Item>
                <Form.Item label={<span className="text-[#002C55]">Tel 3</span>} name="tel3">
                    <Input
                        onChange={handleTel3Change}
                        maxLength={10}
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 0985574485 (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0)"
                        disabled={isFormDisabled || true}
                        onFocus={handleInputFocus}
                        onBlur={handleInputBlur}
                    />
                </Form.Item>
                {/* <Form.Item label={<span className="text-[#002C55] !hidden ">Latitude</span>} name="latitude">
                    <Input  className="!hidden" disabled />
                </Form.Item>
                <Form.Item label={<span className="text-[#002C55] !hidden ">Longitude</span>} name="longitude">
                    <Input className="!hidden" disabled />
                </Form.Item> */}
                <Form.Item>
                    <>
                        
                        {/* <div> AAA  {isFormDisabled.toString()} </div> */}
                        {/* <div> BBB {!(isFormDisabled || !isFormValid).toString()} </div> */}
                        <Button
                            type="primary"
                            block
                            style={{
                                marginBottom: 12,
                                ...(isFormDisabled || !isFormValid ? {
                                    backgroundColor: '#d1d5db',
                                    borderColor: '#d1d5db',
                                    color: '#6b7280'
                                } : {})
                            }}
                            className={`
                                ${(isFormDisabled || !isFormValid) ?
                                    'hover:!text-white hover:!bg-gray-400 hover:!border-gray-400' :
                                    ''
                                }
                            `}
                            onClick={handleSubmit}
                            disabled={isFormDisabled || !isFormValid}
                        >
                            Confirm
                        </Button>
                        <Button
                            type="default"
                            block
                            onClick={() => {
                                console.log('üö´ FormVillageLocation - Cancel button clicked');
                                console.log('üö´ Before cancel - isCreatingMode:', isCreatingMode);
                                console.log('üö´ Before cancel - selectedMarker:', selectedMarker);
                                console.log('üö´ Before cancel - hasActiveMarker:', hasActiveMarker);

                                // ‡∏ï‡∏±‡πâ‡∏á flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏ì‡∏∞ cancel
                                isCancellingRef.current = true;

                                // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô
                                form.resetFields();
                                
                                // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå state ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ form invalid ‡πÄ‡∏û‡∏∑‡πà‡∏≠ disable Address
                                setIsFormValid(false);
                                console.log('üö´ Set isFormValid to false to ensure Address is disabled');
                                
                                // Reset focus/input flags
                                isUserFocusedRef.current = false;
                                isUserInputtingRef.current = false;
                                isUserInteractingRef.current = false;
                                setIsUserInputting(false);
                                
                                // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå ref data - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï currentMarkerIdRef ‡πÄ‡∏õ‡πá‡∏ô null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ unlock marker ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                                lastUserSelectedAddress.current = null;
                                currentMarkerIdRef.current = null; // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ isMarkerReselected = true
                                originalMarkerDataRef.current = null;
                                lastFormUpdateTimeRef.current = 0;
                                
                                console.log('üßπ Cleared currentMarkerIdRef to enable marker reselection');
                                
                                console.log('üîì All form interaction flags and data reset on cancel');

                                // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å marker ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                                console.log('üö´ Calling onMarkerSelect(null) to clear active marker...');
                                if (onMarkerSelect) {
                                    onMarkerSelect(null);
                                }
                                
                                console.log('üö´ After onMarkerSelect(null) call');

                                // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö disable form ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
                                const forceDisableForm = () => {
                                    console.log('üö´ Force disabling form - round');
                                    setIsFormValid(false);
                                };

                                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
                                // setTimeout(forceDisableForm, 50);
                                // setTimeout(forceDisableForm, 100);
                                // setTimeout(forceDisableForm, 200);
                                setTimeout(forceDisableForm, 500);

                                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï cancelling flag ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å delay ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
                                setTimeout(() => {
                                    isCancellingRef.current = false;
                                    console.log('üîì Cancelling flag reset');
                                    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö disable ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å cancel flag reset
                                    // setTimeout(() => {
                                    //     setIsFormValid(false);
                                    //     console.log('üö´ Final force disable after cancel flag reset');
                                    // }, 100);
                                }, 300); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ delay ‡πÄ‡∏õ‡πá‡∏ô 300ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ state update ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô

                                // ‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞ marker ‡∏à‡∏≥‡∏•‡∏≠‡∏á (temporary) ‡∏Å‡∏±‡∏ö marker ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (existing)
                                // Temporary marker ‡∏à‡∏∞‡∏°‡∏µ ID ‡πÄ‡∏õ‡πá‡∏ô timestamp (Date.now()) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (13 ‡∏´‡∏•‡∏±‡∏Å)
                                // Existing marker ‡∏à‡∏∞‡∏°‡∏µ ID ‡∏à‡∏≤‡∏Å database ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏õ‡∏Å‡∏ï‡∏¥ (1-6 ‡∏´‡∏•‡∏±‡∏Å)
                                console.log(typeof selectedMarker?.id, 'typeof selectedMarker?.id')
                                const isTemporaryMarker = typeof selectedMarker?.id === 'number'

                                console.log('selectedMarker.id:', selectedMarker?.id);
                                console.log('isTemporaryMarker:', isTemporaryMarker);
                                console.log(onMarkerDelete, 'onMarkerDelete')
                                // ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ marker ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                                
                                if (isTemporaryMarker && onMarkerDelete) {
                                    const markerId = typeof selectedMarker.id === 'string' ? parseInt(selectedMarker.id) : selectedMarker.id;
                                    onMarkerDelete(markerId);
                                } else {
                                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö existing marker ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô cancel
                                    if (selectedMarker && !isTemporaryMarker) {
                                        console.log('FormVillageLocation - Resetting marker to original position:', selectedMarker.id);
                                        const currentMarkerId = selectedMarker.id.toString();
                                        const originalData = allMarkersOriginalDataRef.current[currentMarkerId];
                                        if (originalData) {
                                            resetMarkerToOriginal(selectedMarker.id, originalData);
                                        }
                                    }

                                    if (onCancel) {
                                        console.log('FormVillageLocation - Calling onCancel');
                                        onCancel();
                                    }
                                }
                                
                            }}
                            disabled={isFormDisabled}
                        >
                            Cancel
                        </Button>
                    </>
                </Form.Item>
            </Form>
        </div>
    );
}

export default FormVillageLocation;