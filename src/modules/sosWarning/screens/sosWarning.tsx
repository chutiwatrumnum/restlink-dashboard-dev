import { useState, useEffect, useRef, useCallback } from "react";
import Header from "../../../components/templates/Header";
import { ModalFormUpdate } from "../components/ModalFormUpload";
import FormWarningSOS from "../components/FormWarningSOS";
import ImageVillage from "../components/ImageVilage";
import FormVillageLocation from "../components/FormVillageLocation";
import BuildingCondo from "../components/BuildingCondo";
import { Row, Col, Card, Spin } from "antd";
import { deletePlanAccount, deleteMarker, getMasterData, getVillageData, getEmergency } from "../service/api/SOSwarning";
import { dataSelectPlan, dataAllMap, SelectMarker } from "../../../stores/interfaces/SosWarning";
import { io, Socket } from 'socket.io-client';
import { encryptStorage } from "../../../utils/encryptStorage";
import ConfirmModal from "../../../components/common/ConfirmModal";
import SuccessModal from "../../../components/common/SuccessModal";

const WarrantyTracking = () => {

  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [showWarningCondo, setShowWarningCondo] = useState<boolean | null>(null);
  const imageRef = useRef<HTMLDivElement>(null);
  const formVillageRef = useRef<HTMLDivElement>(null);
  const [projectName, setProjectName] = useState<string>("");
  const [buildingPlan, setBuildingPlan] = useState<{
    condoType: string;
    floor: number;
    numberOfBuilding: number;
  } | null>(null);
  const [dataSelectPlan, setDataSelectPlan] = useState<dataSelectPlan>({
    planType: [],
    planTypeCondo: [],
    unit: []
  });
  const [dataMapAll, setDataMapAll] = useState<dataAllMap>({
    id: '',
    planInfoId: '',
    projectName: '',
    planTypeId: 70,
    planType: '',
    planTypeCondo: '',
    floor: '',
    planImg: '',
    marker: [],
    zone: []
  });
  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ß‡πà‡∏≤ FormVillageLocation ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å handleAreaClick)
  const [shouldShowVillageForm, setShouldShowVillageForm] = useState<boolean>(false);
  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á FormWarningSOS (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏Å‡∏î cancel)
  const [shouldShowWarningSOS, setShouldShowWarningSOS] = useState<boolean>(true);
  const [currentLat, setCurrentLat] = useState("50.5040806515");
  const [currentLng, setCurrentLng] = useState("-50.5040806515");
  const [currentMapMode, setCurrentMapMode] = useState<'preview' | 'work-it'>('preview');
  const [shouldFocusNameInput, setShouldFocusNameInput] = useState(false);
  const [isCreatingMode, setIsCreatingMode] = useState(false);
  const [selectedMarker, setSelectedMarker] = useState<SelectMarker | null>(null);
  const [unitHover, setUnitHover] = useState<number | null>(null);
  const [unitClick, setUnitClick] = useState<number | null>(null);


  // Debug selectedMarker changes
  // useEffect(() => {
  //   console.log('üîÑ selectedMarker state changed:', {
  //     selectedMarker,
  //     hasSelectedMarker: !!selectedMarker,
  //     timestamp: new Date().toISOString()
  //   });
  // }, [selectedMarker]);

  const [selectedMarkerUpdate, setSelectedMarkerUpdate] = useState<{
    id: string;
    name: string;
  } | null>(null);
  const [planType, setPlanType] = useState<string>("");
  const [socket, setSocket] = useState<Socket | null>(null);
  const [connected, setConnected] = useState(false);
  const [messages, setMessages] = useState<any[]>([]);
  const [hasImageData, setHasImageData] = useState(false);
  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• alert markers (‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)
  const [alertMarkers, setAlertMarkers] = useState<{ red: any[], yellow: any[] }>({ red: [], yellow: [] });

  const [editMarkerData, setEditMarkerData] = useState<any | null>(null);
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock ‡∏Ç‡∏≠‡∏á markers
  const [markersLocked, setMarkersLocked] = useState<boolean>(true);
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏Ç‡∏≠‡∏á markers
  const [markersFullOpacity, setMarkersFullOpacity] = useState<boolean>(false);
  const [dataEmergency, setDataEmergency] = useState<any>(null)
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toast
  const [showToast, setShowToast] = useState<boolean>(false);
  const [isToastExpanded, setIsToastExpanded] = useState<boolean>(false);
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ active marker
  const [hasActiveMarker, setHasActiveMarker] = useState<boolean>(false);

  // Loading state
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [loadingText, setLoadingText] = useState<string>("Loading...");
  // useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh map ‡πÄ‡∏°‡∏∑‡πà‡∏≠ layout ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á form ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const shouldShowForm = (alertMarkers.red.length > 0 || alertMarkers.yellow.length > 0 || shouldShowVillageForm) && currentMapMode !== 'preview';

    // Refresh map ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å layout ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if (villageMapRefreshRef.current) {
      setTimeout(() => {
        if (villageMapRefreshRef.current) {
          villageMapRefreshRef.current();
        }
      }, 350);
    }
  }, [alertMarkers.red.length, alertMarkers.yellow.length, shouldShowVillageForm, currentMapMode]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ lat/lng ‡∏à‡∏≤‡∏Å VillageMapTS
  const handleLatLngChange = useCallback((latitude: number, longitude: number) => {
    setCurrentLat(latitude.toString());
    setCurrentLng(longitude.toString());
  }, []);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VillageMapTS functions
  const villageMapResetRef = useRef<((markerId: string | number) => void) | null>(null);
  const villageMapUpdateAddressRef = useRef<((markerId: string, newAddress: string) => void) | null>(null);
  const villageMapUpdateTelRef = useRef<((markerId: string | number, telType: 'tel1' | 'tel2' | 'tel3', newTel: string) => void) | null>(null);
  const villageMapConfirmRef = useRef<((markerId: string | number, markerData: any) => void) | null>(null);
  const villageMapRefreshRef = useRef<(() => void) | null>(null);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö marker ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å VillageMapTS
  const handleMarkerSelect = useCallback((marker: any, isNewMarker: boolean = false) => {

    // Force re-render by creating new object reference
    if (marker) {
      const newMarker = { ...marker };
      setSelectedMarker(newMarker);

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isCreatingMode ‡∏ï‡∏≤‡∏° parameter ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
      setIsCreatingMode(isNewMarker);

      // ‡πÅ‡∏™‡∏î‡∏á FormVillageLocation ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ marker ‡πÉ‡∏´‡∏°‡πà
      setShouldShowVillageForm(true);
      setShouldShowWarningSOS(false);
    } else {
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å marker ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      setSelectedMarker(null);
      setIsCreatingMode(false);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ marker ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏™‡∏î‡∏á form
      const hasAlertMarkers = alertMarkers.red.length > 0 || alertMarkers.yellow.length > 0;
      if (hasAlertMarkers) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ marker ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á FormWarningSOS ‡πÅ‡∏ó‡∏ô
        setShouldShowVillageForm(false);
        setShouldShowWarningSOS(true);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ marker ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà
        setShouldShowVillageForm(false);
        setShouldShowWarningSOS(false);
      }
    }
  }, [villageMapResetRef, alertMarkers]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ marker
  const handleMarkerNameChange = useCallback((markerId: string | number, newName: string) => {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó selectedMarker - ‡∏ï‡πâ‡∏≠‡∏á preserve ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°
    if (selectedMarker && selectedMarker.id === markerId) {
      const updatedMarker = {
        ...selectedMarker, // preserve ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á tel1, tel2, tel3
        name: newName,      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞ name
      };
      setSelectedMarker(updatedMarker);
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó form field ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏õ‡∏¢‡∏±‡∏á VillageMapTS - ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ name
    setSelectedMarkerUpdate({ id: markerId.toString(), name: newName });

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå selectedMarkerUpdate ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 100ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    setTimeout(() => {
      setSelectedMarkerUpdate(null);
    }, 500);
  }, [selectedMarker]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç address ‡∏Ç‡∏≠‡∏á marker
  const handleMarkerAddressChange = useCallback((markerId: string | number, newAddress: string) => {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡πÉ‡∏ô VillageMapTS
    if (villageMapUpdateAddressRef.current) {
      villageMapUpdateAddressRef.current(markerId.toString(), newAddress);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó selectedMarker
    if (selectedMarker && selectedMarker.id === markerId) {
      const updatedMarker = {
        ...selectedMarker,
        address: newAddress
      };
      setSelectedMarker(updatedMarker);
    }
  }, [selectedMarker]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç tel1 ‡∏Ç‡∏≠‡∏á marker
  const handleMarkerTel1Change = useCallback((markerId: string | number, newTel1: string) => {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó selectedMarker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å save ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ click marker ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (selectedMarker && selectedMarker.id === markerId) {
      const updatedMarker = {
        ...selectedMarker,
        tel1: newTel1,
        // preserve ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tel ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        tel2: (selectedMarker as any).tel2 || "",
        tel3: (selectedMarker as any).tel3 || ""
      };
      setSelectedMarker(updatedMarker);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡πÉ‡∏ô VillageMapTS ‡∏î‡πâ‡∏ß‡∏¢
    if (villageMapUpdateTelRef.current) {
      villageMapUpdateTelRef.current(markerId, 'tel1', newTel1);
    }
  }, [selectedMarker]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç tel2 ‡∏Ç‡∏≠‡∏á marker
  const handleMarkerTel2Change = useCallback((markerId: string | number, newTel2: string) => {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó selectedMarker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å save ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ click marker ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (selectedMarker && selectedMarker.id === markerId) {
      const updatedMarker = {
        ...selectedMarker,
        tel2: newTel2,
        // preserve ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tel ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        tel1: (selectedMarker as any).tel1 || "",
        tel3: (selectedMarker as any).tel3 || ""
      };
      setSelectedMarker(updatedMarker);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡πÉ‡∏ô VillageMapTS ‡∏î‡πâ‡∏ß‡∏¢
    if (villageMapUpdateTelRef.current) {
      villageMapUpdateTelRef.current(markerId, 'tel2', newTel2);
    }
  }, [selectedMarker]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç tel3 ‡∏Ç‡∏≠‡∏á marker
  const handleMarkerTel3Change = useCallback((markerId: string | number, newTel3: string) => {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó selectedMarker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å save ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ click marker ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (selectedMarker && selectedMarker.id === markerId) {
      const updatedMarker = {
        ...selectedMarker,
        tel3: newTel3,
        // preserve ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tel ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        tel1: (selectedMarker as any).tel1 || "",
        tel2: (selectedMarker as any).tel2 || ""
      };
      setSelectedMarker(updatedMarker);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡πÉ‡∏ô VillageMapTS ‡∏î‡πâ‡∏ß‡∏¢
    if (villageMapUpdateTelRef.current) {
      villageMapUpdateTelRef.current(markerId, 'tel3', newTel3);
    }
  }, [selectedMarker]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÉ‡∏´‡∏°‡πà)
  const handleMarkerUpdate = useCallback((markerId: string, updatedMarkerData: any) => {

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó selectedMarker ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    setSelectedMarker(updatedMarkerData);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á VillageMapTS ‡∏ú‡πà‡∏≤‡∏ô villageMapConfirmRef ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker ‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    if (villageMapConfirmRef.current) {
      // ‡πÅ‡∏õ‡∏•‡∏á markerId ‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô number ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á VillageMapTS
      const numericMarkerId = parseInt(markerId);
      villageMapConfirmRef.current(numericMarkerId, updatedMarkerData);
    }
  }, [villageMapConfirmRef]);

  // setting pagination Option

  const handleUploadImage = () => {
    setIsModalOpen(true);
  };

  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const handleUploadSuccess = (base64: string) => {
    setIsUploading(true);
    setUploadedImage(base64);
    setIsUploading(false);
    setIsModalOpen(false);
  };

  const handleCancelCondo = (e: React.MouseEvent<HTMLDivElement>) => {
    e.stopPropagation();
    // setShowWarningCondo(false);
  };

  const handleCancelVillage = () => {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï marker position ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ marker ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà
    if (selectedMarker && villageMapResetRef.current) {
      // ‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞ marker ‡∏à‡∏≥‡∏•‡∏≠‡∏á (temporary) ‡∏Å‡∏±‡∏ö marker ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (existing)
      const numericMarkerId = typeof selectedMarker.id === 'string' ? parseInt(selectedMarker.id) : selectedMarker.id;
      const isTemporaryMarker = numericMarkerId > 1000000000000; // 13 ‡∏´‡∏•‡∏±‡∏Å
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ villageMapResetRef ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö marker ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (isTemporaryMarker) {
        villageMapResetRef.current(selectedMarker.id.toString());
      }
    }

    setShouldShowVillageForm(false);
    setShouldShowWarningSOS(true); // ‡πÅ‡∏™‡∏î‡∏á FormWarningSOS ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î cancel

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå selectedMarker
    setSelectedMarker(null);
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Confirm marker
  const handleConfirmMarker = useCallback(() => {
    if (selectedMarker && villageMapConfirmRef.current) {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• marker ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å form ‡πÑ‡∏õ‡∏¢‡∏±‡∏á VillageMapTS
      villageMapConfirmRef.current(selectedMarker.id, selectedMarker);

      // ‡∏ã‡πà‡∏≠‡∏ô form ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á FormWarningSOS
      setShouldShowVillageForm(false);
      setShouldShowWarningSOS(true);
      setSelectedMarker(null);
    }
  }, [selectedMarker]);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Cancel marker 
  const handleCancelMarker = useCallback(() => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ marker ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasAlertMarkers = alertMarkers.red.length > 0 || alertMarkers.yellow.length > 0;

    if (selectedMarker && villageMapResetRef.current) {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ cancelMarkerEdit ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á "cancel" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ VillageMapTS ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      villageMapResetRef.current("cancel");
    }
    // ‡∏ó‡∏≥‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß:
    // 1. ‡∏õ‡∏¥‡∏î form village ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setShouldShowVillageForm(false);
    // 2. ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå selectedMarker
    setSelectedMarker(null);
    // 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ shouldShowWarningSOS ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç - ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ marker ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    setShouldShowWarningSOS(hasAlertMarkers);
  }, [selectedMarker, villageMapResetRef, alertMarkers]);

  const loadFirst = async () => {
    try {
      setIsLoading(true);
      // setLoadingText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å...");

      let data = await getMasterData();

      // setLoadingText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà...");
      let dataAllMap = await getVillageData();
      
      // setLoadingText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô...");
      let dataEmergency = await getEmergency();

      if (dataEmergency.status) {
        setDataEmergency(dataEmergency.result)
      }

      if (data.status) {
        setDataSelectPlan(data.result);
      }

      if (dataAllMap.status) {
        dataAllMap.result.marker = dataAllMap.result.marker.marker.map((item: any) => {
          return item
        })
        if(dataAllMap.result.planImg){
          setUploadedImage(dataAllMap.result.planImg)
        }

        setDataMapAll(dataAllMap.result);

        // ‡πÄ‡∏ã‡πá‡∏ï uploadedImage ‡πÅ‡∏•‡∏∞ hasImageData ‡∏à‡∏≤‡∏Å API response
        if (dataAllMap.result && dataAllMap.result.planImg) {
          setUploadedImage(dataAllMap.result.planImg);
          setHasImageData(true);
        } else {
          setHasImageData(false);
        }
      } else {
        setHasImageData(false);
      }

      // setLoadingText("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π smooth
      setTimeout(() => {
        setIsLoading(false);
      }, 500);

    } catch (error) {
      // console.error('Error loading data:', error);
      // setLoadingText("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      setTimeout(() => {
        setIsLoading(false);
      }, 1000);
    }
  }

  useEffect(() => {
    loadFirst();
  }, []);

  // ‡πÅ‡∏¢‡∏Å Socket.IO ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô useEffect ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  useEffect(() => {
    async function connectSocket() {
      const URL = "https://reslink-security-wqi2p.ondigitalocean.app/socket/sos/dashboard"
      const access_token = encryptStorage.getItem("access_token");
      const projectID = await encryptStorage.getItem("projectId");
      const newSocket = io(URL, {
        reconnection: true,
        reconnectionAttempts: 2,
        reconnectionDelay: 1000,
        reconnectionDelayMax: 2000,
        timeout: 10000,
        extraHeaders: {
          Authorization: `Bearer ${access_token}`,
          "x-api-key": projectID
        },
      });
      newSocket.connect();

      newSocket.on("connect", () => {
        setConnected(true);
      });

      newSocket.on("disconnect", () => {
        setConnected(false);
      });

      newSocket.on("sos", (data) => {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        if (data) {
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker
          if (data.marker && Array.isArray(data.marker)) {
            setDataMapAll(prev => ({
              ...prev,
              marker: data.marker
            }));
          }

          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó emergency
          if (data.emergency) {
            setDataEmergency((prev: any) => ({
              ...prev,
              emergency: data.emergency,
              deviceWarning: data.deviceWarning || []
            }));
          }
        }

        if (data.deviceWarning || data.emergency) {
          setShowToast(true);
        }
      });

      // newSocket.onAny((eventName, ...args) => {
      //   console.log('üîç Received ANY event:', eventName, args);
      // });

      // Debug - Listen for ANY event
      setSocket(newSocket); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ


      // Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
      return () => {
        // console.log('üßπ Cleaning up Socket.IO connection');
        newSocket.close();
      };
    }
    connectSocket();
  }, []); // Empty dependency array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á No plan ‡πÄ‡∏™‡∏°‡∏≠)
  const hasPlan = false;




  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handle click - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á FormVillageLocation ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥
  const handleAreaClick = (e: React.MouseEvent<HTMLDivElement>) => {
    // ‡∏ù‡∏±‡πà‡∏á Village: ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á form ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ VillageMapTS ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏°‡∏≤)
    // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà form ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ß‡πâ
    if (formVillageRef.current && formVillageRef.current.contains(e.target as Node)) {
      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà form ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏π‡∏õ‡∏ö‡πâ‡∏≤‡∏ô (üè†) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const target = e.target as HTMLElement;
    const isHomeButton = target.textContent?.includes('üè†') ||
      target.closest('button')?.textContent?.includes('üè†') ||
      target.closest('[title*="‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Zoom ‡πÅ‡∏•‡∏∞ Pan"]');

    if (isHomeButton) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏π‡∏õ‡∏ö‡πâ‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î form
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà edit modal (form ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç marker ‡∏´‡∏£‡∏∑‡∏≠ zone) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isEditModal = target.closest('[class*="showEditMarkerModal"]') ||
      target.closest('[class*="showEditZoneModal"]') ||
      target.closest('form[class*="space-y-3"]') ||
      target.textContent?.includes('‚úï') || // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ô edit modal
      target.textContent?.includes('üíæ') || // ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      target.textContent?.includes('‚Ü∫') || // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
      target.textContent?.includes('üóëÔ∏è') || // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
      target.closest('[title*="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"]') ||
      target.closest('[title*="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"]') ||
      target.closest('[title*="‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"]') ||
      target.closest('[title*="‡∏•‡∏ö"]');

    if (isEditModal) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà edit modal ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î FormVillageLocation
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà map ‡∏´‡∏£‡∏∑‡∏≠ monitoring ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isMapClick = target.closest('img') || // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      target.closest('[class*="bg-blue-50"]') || // Monitoring section
      target.closest('[class*="bg-gray-50"]') || // Alert Status section
      target.textContent?.includes('Monitoring') ||
      target.textContent?.includes('Alert Status') ||
      target.textContent?.includes('Emergency') ||
      target.textContent?.includes('Normal');

    if (isMapClick) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà map ‡∏´‡∏£‡∏∑‡∏≠ monitoring ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î form
      return;
    }

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î form (‡∏´‡∏≤‡∏Å‡∏°‡∏µ) ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á FormVillageLocation ‡πÅ‡∏ó‡∏ô FormWarningSOS
    // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    // if (shouldShowVillageForm) {
    //   setShouldShowVillageForm(false);
    //   setShouldShowWarningSOS(false); // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á FormWarningSOS ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    //   // ‡πÅ‡∏™‡∏î‡∏á FormVillageLocation ‡πÅ‡∏ó‡∏ô (‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á FormWarningSOS)
    // }
  };

  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ VillageMapTS ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á FormVillageLocation (‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á marker/zone ‡πÄ‡∏™‡∏£‡πá‡∏à)
  const handleShowVillageForm = () => {
    setShouldShowVillageForm(true);
    setShouldShowWarningSOS(false); // ‡∏ã‡πà‡∏≠‡∏ô FormWarningSOS ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á FormVillageLocation
  };

  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ map mode ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  const handleMapModeChange = useCallback((mode: 'preview' | 'work-it') => {
    setCurrentMapMode(mode);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏Ç‡∏≠‡∏á markers ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
    const isPreviewMode = mode === 'preview';
    setMarkersLocked(true); // lock markers ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î
    setMarkersFullOpacity(isPreviewMode); // ‡πÅ‡∏™‡∏î‡∏á marker ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î preview

    // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á ImageVillage component ‡πÅ‡∏•‡∏∞ refresh map
    if (villageMapRefreshRef.current) {
      setTimeout(() => {
        if (villageMapRefreshRef.current) {
          villageMapRefreshRef.current();
        }
      }, 100);
    }
  }, [villageMapRefreshRef]);

  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ marker ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
  const handleMarkerDeleted = useCallback(async (deletedMarker?: any) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ deletedMarker ‡πÄ‡∏õ‡πá‡∏ô number (markerId) ‡∏´‡∏£‡∏∑‡∏≠ array
    let id;
    if (typeof deletedMarker === 'number') {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô markerId ‡∏à‡∏≤‡∏Å FormVillageLocation
      id = deletedMarker;
    } else if (deletedMarker && Array.isArray(deletedMarker) && deletedMarker[0]) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏à‡∏≤‡∏Å VillageMapTS
      id = deletedMarker[0].id;
    } else {
      return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á loading ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö marker
    setLoadingText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");
    setIsLoading(true);

    let data = await deleteMarker(id);
    if (data.status) {
      if (data.result) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó marker
        SuccessModal("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 900)
        if (data.result.marker && Array.isArray(data.result.marker)) {
          setDataMapAll((prev: any) => ({
            ...prev,
            marker: data.result.marker
          }));
        }
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó emergency
        if (data.result.emergency) {
          setDataEmergency((prev: any) => ({
            ...prev,
            emergency: data.result.emergency,
            deviceWarning: data.result.deviceWarning || []
          }));
        }
      }
    }
    setShouldShowVillageForm(false);
    setShouldShowWarningSOS(true);
    setSelectedMarker(null);

    // ‡∏õ‡∏¥‡∏î loading
    setTimeout(() => {
      setIsLoading(false);
    }, 500);
  }, [selectedMarker]);

  // callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö marker ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Cancel ‡πÉ‡∏ô form
  const handleCancelMarkerTemp = useCallback((markerId: string | number) => {
    // ‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞ marker ‡∏à‡∏≥‡∏•‡∏≠‡∏á (temporary) ‡∏Å‡∏±‡∏ö marker ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (existing)
    // Temporary marker ‡∏à‡∏∞‡∏°‡∏µ ID ‡πÄ‡∏õ‡πá‡∏ô timestamp (Date.now()) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (13 ‡∏´‡∏•‡∏±‡∏Å)
    // Existing marker ‡∏à‡∏∞‡∏°‡∏µ ID ‡∏à‡∏≤‡∏Å database ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏õ‡∏Å‡∏ï‡∏¥ (1-6 ‡∏´‡∏•‡∏±‡∏Å)
    const numericMarkerId = typeof markerId === 'string' ? parseInt(markerId) : markerId;
    const isTemporaryMarker = numericMarkerId > 1000000000000; // 13 ‡∏´‡∏•‡∏±‡∏Å


    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ villageMapResetRef ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö marker ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (isTemporaryMarker && villageMapResetRef.current || true) {
      if (villageMapResetRef.current) {
        villageMapResetRef.current(markerId || 0);
      }
    }

    // ‡∏õ‡∏¥‡∏î form ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ FormWarningSOS
    setShouldShowVillageForm(false);
    setShouldShowWarningSOS(true);
    setSelectedMarker(null);
  }, [villageMapResetRef, isCreatingMode, selectedMarker]);

  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ zone ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
  const handleZoneCreated = useCallback(() => {
    setShouldShowVillageForm(false);
    setShouldShowWarningSOS(true);
    setSelectedMarker(null);
  }, []);

  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ zone ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const handleZoneEdited = useCallback(() => {
    setShouldShowVillageForm(false);
    setShouldShowWarningSOS(true);
    setSelectedMarker(null);
  }, []);

  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç zone (double click)
  const handleZoneEditStarted = useCallback(() => {
    setShouldShowVillageForm(false);
    setShouldShowWarningSOS(true);
    setSelectedMarker(null);
  }, []);

  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏´‡πâ focus ‡∏ó‡∏µ‡πà input Name
  const handleNewMarkerCreated = useCallback(() => {
    setShouldFocusNameInput(true);
  }, []);

  // callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• alert markers ‡∏à‡∏≤‡∏Å VillageMapTS
  const handleAlertMarkersChange = useCallback((alertMarkersData: { red: any[], yellow: any[] }) => {
    setAlertMarkers(alertMarkersData);
  }, []);

  const handleCondoPlanSubmit = (
    condoType: string,
    floor: number,
    numberOfBuilding: number,
    projectName: string
  ) => {
    setBuildingPlan({ condoType, floor, numberOfBuilding });
    setIsModalOpen(false);
    setProjectName(projectName);
  };


  const confirmDeletePlan = async (id: string) => {
    setLoadingText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà...");
    setIsLoading(true);

    let dataDelete = await deletePlanAccount(id);
    if (dataDelete.status) {
      setLoadingText("‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤...");
      await SuccessModal("‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 1000);
      window.location.reload();
    }
    else {
      setIsLoading(false);
    }
  }

  const deletePlan = async () => {
    let id = dataMapAll?.id || '';
    ConfirmModal({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà",
      message: "",
      okMessage: "‡∏•‡∏ö",
      cancelMessage: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      onOk: () => confirmDeletePlan(id),
      onCancel: () => { }
    });
  }

  // const fetchVillageData = async () => {
  //   try {
  //     const data = await getVillageData();

  //     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ result ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  //     if (data?.result) {
  //       const result = data.result;

  //       // Set uploaded image ‡∏à‡∏≤‡∏Å planImage
  //       if (result.planImage) {
  //         setUploadedImage(result.planImage);
  //         setHasImageData(true);
  //       }

  //       // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• markers ‡∏à‡∏≤‡∏Å API response
  //       // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• zones ‡∏à‡∏≤‡∏Å API response
  //     }
  //   } catch (error) {
  //     setHasImageData(false);
  //   }
  // }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ editMarkerData
  const handleEditMarkerData = (markerData: any | null) => {
    setEditMarkerData(markerData);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á toast
  const handleShowToast = () => {
    setShowToast(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô toast
  const handleHideToast = () => {
    setShowToast(false);
    setIsToastExpanded(false); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î toast
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toggle ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢ toast
  const handleToggleToast = () => {
    setIsToastExpanded(!isToastExpanded);
  };

  // Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ active marker ‡∏à‡∏≤‡∏Å VillageMapTS
  const handleActiveMarkerChange = (isActive: boolean) => {
    setHasActiveMarker(isActive);
  };

  // Loading Component
  const LoadingComponent = () => (
    <div className="flex flex-col items-center justify-center min-h-[70vh] w-full">
      <div className="text-center">
        <Spin size="large" className="mb-6" />
        <div className="font-bold text-lg text-[#002B45] mb-2">
          {loadingText}
        </div>
        <div className="text-[#002B45] text-sm max-w-xs">
          Please wait...
        </div>
      </div>
    </div>
  );

  // ‡πÅ‡∏™‡∏î‡∏á Loading ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (isLoading) {
    return (
      <>
        <div className="flex justify-between items-center !mb-5">
          <Header title="Add location" className="!mb-0" />
        </div>
        <LoadingComponent />
      </>
    );
  }

  return (
    <>
      <ModalFormUpdate
        dataSelectPlan={dataSelectPlan}
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onUploadSuccess={handleUploadSuccess}
        isUploading={isUploading}
        onCondoPlanSubmit={handleCondoPlanSubmit}
        setProjectName={setProjectName}
        setPlanType={setPlanType}
        planType={planType}
        loadFirst={loadFirst}
        dataMapAll={dataMapAll}
      />

      <div className="flex justify-between  items-center !mb-5">
        <Header title="Add location" className="!mb-0" />
        <div className="flex gap-3 items-center">
          {/* Button Group ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î */}
          {(dataMapAll?.id || uploadedImage) && (
            <div className="flex border border-gray-300 rounded-lg overflow-hidden bg-white">
              <button
                onClick={() => !hasActiveMarker && handleMapModeChange('preview')}
                disabled={hasActiveMarker}
                className={`
                  px-4 py-2 text-sm font-medium transition-all duration-200 h-12 w-40
                  ${hasActiveMarker
                    ? 'cursor-not-allowed bg-gray-200 text-gray-400'
                    : 'cursor-pointer'
                  }
                  ${currentMapMode === 'preview'
                    ? 'bg-blue-500 !text-white shadow-sm'
                    : hasActiveMarker
                      ? 'bg-gray-200 text-gray-400'
                      : 'bg-white text-gray-700 hover:bg-gray-50'
                  }
                `}
                title={hasActiveMarker ? '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç marker ‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô' : ''}
              >
                PREVIEW
              </button>
              <button
                onClick={() => !hasActiveMarker && handleMapModeChange('work-it')}
                disabled={hasActiveMarker}
                className={`px-4 py-2 text-sm 
                  font-medium transition-all duration-200 border-l border-gray-300 h-12 w-40
                  ${hasActiveMarker
                    ? 'cursor-not-allowed bg-gray-200 text-gray-400'
                    : 'cursor-pointer'
                  }
                ${currentMapMode === 'work-it'
                    ? 'bg-blue-500 !text-white shadow-sm'
                    : hasActiveMarker
                      ? 'bg-gray-200 text-gray-400'
                      : 'bg-white text-gray-700 hover:bg-gray-50'
                  }`}
                title={hasActiveMarker ? '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç marker ‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô' : ''}
              >
                EDIT
              </button>
            </div>
          )}
        </div>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• village */}
      {uploadedImage && (
        <div className="" onClick={handleAreaClick}>
          <Card className="h-full" styles={{ body: { padding: 0 } }}>
            <Row gutter={0} className="h-full test flex-col sm:flex-row">
              {/* ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á form */}
              <Col
                span={24}
                sm={24}
                md={24}
                lg={16}
                className={`transition-all duration-300 ease-in-out ${
                  // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î
                  (alertMarkers.red.length === 0 && alertMarkers.yellow.length === 0 && !shouldShowVillageForm) ||
                    currentMapMode === 'preview' ? 'lg:w-full' : 'lg:w-2/3'
                  }`}
              >
                <div ref={imageRef}>
                  <ImageVillage
                    uploadedImage={uploadedImage || ""}
                    projectName={projectName}
                    setShowWarningVillage={handleShowVillageForm}
                    showWarningVillage={shouldShowVillageForm}
                    dataSelectPlan={dataSelectPlan}
                    dataMapAll={dataMapAll}
                    onLatLngChange={handleLatLngChange}
                    onMarkerSelect={handleMarkerSelect}
                    onMarkerNameChange={handleMarkerNameChange}
                    onMarkerAddressChange={handleMarkerAddressChange}
                    onMarkerUpdate={handleMarkerUpdate}
                    selectedMarkerUpdate={selectedMarkerUpdate}
                    villageMapResetRef={villageMapResetRef}
                    villageMapUpdateAddressRef={villageMapUpdateAddressRef}
                    villageMapUpdateTelRef={villageMapUpdateTelRef}
                    villageMapConfirmRef={villageMapConfirmRef}
                    villageMapRefreshRef={villageMapRefreshRef}
                    mapMode={currentMapMode}
                    onMapModeChange={handleMapModeChange}
                    onMarkerDeleted={handleMarkerDeleted}
                    onZoneCreated={handleZoneCreated}
                    onZoneEdited={handleZoneEdited}
                    onZoneEditStarted={handleZoneEditStarted}
                    onNewMarkerCreated={handleNewMarkerCreated}
                    onAlertMarkersChange={handleAlertMarkersChange}
                    editMarkerData={editMarkerData}
                    onEditMarkerData={handleEditMarkerData}
                    markersLocked={markersLocked}
                    markersFullOpacity={markersFullOpacity}
                    setDataMapAll={setDataMapAll}
                    setDataEmergency={setDataEmergency}
                    setUnitHover={setUnitHover}
                    setUnitClick={setUnitClick}
                    onActiveMarkerChange={handleActiveMarkerChange}
                  />
                </div>
              </Col>

              {/* Form ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ - ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Å‡∏£‡∏ì‡∏µ */}
              <>
                {/* ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÅ‡∏™‡∏î‡∏á FormVillageLocation */}
                {currentMapMode === 'work-it' && (
                  <Col
                    span={24}
                    sm={24}
                    md={24}
                    lg={8}
                    className="animate-slide-in-right"
                  >

                    <div className="shadow-[-4px_0_8px_-4px_rgba(0,0,0,0.1)] h-full">
                      <div className="h-full animate-fade-in" ref={formVillageRef}>
                        <FormVillageLocation
                          latitude={currentLat}
                          longitude={currentLng}
                          selectedMarker={selectedMarker}
                          onMarkerNameChange={handleMarkerNameChange}
                          onMarkerAddressChange={handleMarkerAddressChange}
                          onMarkerTel1Change={handleMarkerTel1Change}
                          onMarkerTel2Change={handleMarkerTel2Change}
                          onMarkerTel3Change={handleMarkerTel3Change}
                          onMarkerUpdate={handleMarkerUpdate}
                          onConfirm={handleConfirmMarker}
                          onCancel={handleCancelMarker}
                          mapMode={currentMapMode}
                          shouldFocusNameInput={shouldFocusNameInput}
                          onFocusHandled={() => setShouldFocusNameInput(false)}
                          dataSelectPlan={dataSelectPlan}
                          isCreatingMode={isCreatingMode}
                          planType={planType}
                          onMarkerDelete={handleCancelMarkerTemp}
                          idVillage={dataMapAll.id}
                          setShouldShowVillageForm={setShouldShowVillageForm}
                          editMarkerData={editMarkerData}
                          onEditMarkerData={handleEditMarkerData}
                          setDataMapAll={setDataMapAll}
                          onMarkerSelect={handleMarkerSelect}
                          hasActiveMarker={!!selectedMarker}
                          dataAllMap={dataMapAll}
                        />
                      </div>
                    </div>
                  </Col>
                )}

                {currentMapMode === 'preview' && (
                  <Col
                    span={24}
                    sm={24}
                    md={24}
                    lg={8}
                    className="animate-slide-in-right"
                  >
                    <div className={`shadow-[-4px_0_8px_-4px_rgba(0,0,0,0.1)] h-full overflow-hidden ${dataEmergency.emergency.length === 0 && dataEmergency.deviceWarning.length === 0 ? 'flex items-center justify-center' : ''}`}>
                      <div className="animate-fade-in h-full">
                        <FormWarningSOS
                          alertMarkers={alertMarkers}
                          dataMapAll={dataMapAll}
                          dataEmergency={dataEmergency}
                          setDataEmergency={setDataEmergency}
                          unitHover={unitHover}
                          unitClick={unitClick}
                          currentMapMode={currentMapMode}
                          onClearFilter={() => setUnitClick(null)}
                        />
                      </div>
                    </div>
                  </Col>
                )}
              </>

            </Row>
          </Card>
        </div>
      )}
      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• condo */}
      {buildingPlan && (
        <div className="p-4" onClick={handleAreaClick}>
          <Card className="h-full" styles={{ body: { padding: 0 } }}>
            <div ref={imageRef}>
              <BuildingCondo
                projectName={projectName}
                buildingPlan={buildingPlan}
                showWarningCondo={showWarningCondo}
                handleCancelCondo={handleCancelCondo}
                dataMapAll={dataMapAll}
              />
            </div>
          </Card>
        </div>
      )}

      {!uploadedImage && !buildingPlan && (
        <div className="flex flex-col items-center justify-center  min-h-[70vh] w-full text-2xl text-[#403d38]">
          ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plan
        </div>
      )}



      {/* Custom CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö animations */}
      <style>{`
        @keyframes slideInRight {
          from {
            opacity: 0;
            transform: translateX(100%);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }

        @keyframes fadeIn {
          from {
            opacity: 0;
          }
          to {
            opacity: 1;
          }
        }

        @keyframes toastSlideIn {
          from {
            opacity: 0;
            transform: translateX(100%);
            scale: 0.95;
          }
          to {
            opacity: 1;
            transform: translateX(0);
            scale: 1;
          }
        }

        .animate-slide-in-right {
          animation: slideInRight 0.3s ease-out forwards;
        }

        .animate-fade-in {
          animation: fadeIn 0.2s ease-out forwards;
        }

        .animate-toast-slide-in {
          animation: toastSlideIn 0.4s ease-out forwards;
        }

        /* Responsive transitions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö grid layout */
        .transition-grid {
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
      `}</style>
    </>
  );
};

export default WarrantyTracking;
